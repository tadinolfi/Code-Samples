#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="dev_azillion_db")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAgency(Agency instance);
  partial void UpdateAgency(Agency instance);
  partial void DeleteAgency(Agency instance);
  partial void InsertZipcode(Zipcode instance);
  partial void UpdateZipcode(Zipcode instance);
  partial void DeleteZipcode(Zipcode instance);
  partial void InsertAlertHistory(AlertHistory instance);
  partial void UpdateAlertHistory(AlertHistory instance);
  partial void DeleteAlertHistory(AlertHistory instance);
  partial void InsertAnnouncement(Announcement instance);
  partial void UpdateAnnouncement(Announcement instance);
  partial void DeleteAnnouncement(Announcement instance);
  partial void InsertCellPhoneProvider(CellPhoneProvider instance);
  partial void UpdateCellPhoneProvider(CellPhoneProvider instance);
  partial void DeleteCellPhoneProvider(CellPhoneProvider instance);
  partial void InsertCMSPage(CMSPage instance);
  partial void UpdateCMSPage(CMSPage instance);
  partial void DeleteCMSPage(CMSPage instance);
  partial void InsertContinent(Continent instance);
  partial void UpdateContinent(Continent instance);
  partial void DeleteContinent(Continent instance);
  partial void InsertCountry(Country instance);
  partial void UpdateCountry(Country instance);
  partial void DeleteCountry(Country instance);
  partial void InsertCoupon(Coupon instance);
  partial void UpdateCoupon(Coupon instance);
  partial void DeleteCoupon(Coupon instance);
  partial void InsertFieldType(FieldType instance);
  partial void UpdateFieldType(FieldType instance);
  partial void DeleteFieldType(FieldType instance);
  partial void InsertForm(Form instance);
  partial void UpdateForm(Form instance);
  partial void DeleteForm(Form instance);
  partial void InsertFormDocument(FormDocument instance);
  partial void UpdateFormDocument(FormDocument instance);
  partial void DeleteFormDocument(FormDocument instance);
  partial void InsertFormEntry(FormEntry instance);
  partial void UpdateFormEntry(FormEntry instance);
  partial void DeleteFormEntry(FormEntry instance);
  partial void InsertFormEntryArchive(FormEntryArchive instance);
  partial void UpdateFormEntryArchive(FormEntryArchive instance);
  partial void DeleteFormEntryArchive(FormEntryArchive instance);
  partial void InsertFormEntryCache(FormEntryCache instance);
  partial void UpdateFormEntryCache(FormEntryCache instance);
  partial void DeleteFormEntryCache(FormEntryCache instance);
  partial void InsertFormField(FormField instance);
  partial void UpdateFormField(FormField instance);
  partial void DeleteFormField(FormField instance);
  partial void InsertFormFieldData(FormFieldData instance);
  partial void UpdateFormFieldData(FormFieldData instance);
  partial void DeleteFormFieldData(FormFieldData instance);
  partial void InsertFormImage(FormImage instance);
  partial void UpdateFormImage(FormImage instance);
  partial void DeleteFormImage(FormImage instance);
  partial void InsertFormListingType(FormListingType instance);
  partial void UpdateFormListingType(FormListingType instance);
  partial void DeleteFormListingType(FormListingType instance);
  partial void InsertFormSection(FormSection instance);
  partial void UpdateFormSection(FormSection instance);
  partial void DeleteFormSection(FormSection instance);
  partial void InsertFormView(FormView instance);
  partial void UpdateFormView(FormView instance);
  partial void DeleteFormView(FormView instance);
  partial void InsertListingType(ListingType instance);
  partial void UpdateListingType(ListingType instance);
  partial void DeleteListingType(ListingType instance);
  partial void InsertNew(New instance);
  partial void UpdateNew(New instance);
  partial void DeleteNew(New instance);
  partial void InsertOpenHouseDate(OpenHouseDate instance);
  partial void UpdateOpenHouseDate(OpenHouseDate instance);
  partial void DeleteOpenHouseDate(OpenHouseDate instance);
  partial void InsertPaymentProfile(PaymentProfile instance);
  partial void UpdatePaymentProfile(PaymentProfile instance);
  partial void DeletePaymentProfile(PaymentProfile instance);
  partial void InsertPrice(Price instance);
  partial void UpdatePrice(Price instance);
  partial void DeletePrice(Price instance);
  partial void InsertSavedFormEntry(SavedFormEntry instance);
  partial void UpdateSavedFormEntry(SavedFormEntry instance);
  partial void DeleteSavedFormEntry(SavedFormEntry instance);
  partial void InsertSavedSearch(SavedSearch instance);
  partial void UpdateSavedSearch(SavedSearch instance);
  partial void DeleteSavedSearch(SavedSearch instance);
  partial void InsertSavedSearchFormEntryHistory(SavedSearchFormEntryHistory instance);
  partial void UpdateSavedSearchFormEntryHistory(SavedSearchFormEntryHistory instance);
  partial void DeleteSavedSearchFormEntryHistory(SavedSearchFormEntryHistory instance);
  partial void InsertState(State instance);
  partial void UpdateState(State instance);
  partial void DeleteState(State instance);
  partial void InsertSubscription(Subscription instance);
  partial void UpdateSubscription(Subscription instance);
  partial void DeleteSubscription(Subscription instance);
  partial void InsertSubscriptionType(SubscriptionType instance);
  partial void UpdateSubscriptionType(SubscriptionType instance);
  partial void DeleteSubscriptionType(SubscriptionType instance);
  partial void InsertSystemAlert(SystemAlert instance);
  partial void UpdateSystemAlert(SystemAlert instance);
  partial void DeleteSystemAlert(SystemAlert instance);
  partial void InsertSystemAlertUserHistory(SystemAlertUserHistory instance);
  partial void UpdateSystemAlertUserHistory(SystemAlertUserHistory instance);
  partial void DeleteSystemAlertUserHistory(SystemAlertUserHistory instance);
  partial void InsertUserInfo(UserInfo instance);
  partial void UpdateUserInfo(UserInfo instance);
  partial void DeleteUserInfo(UserInfo instance);
  partial void InsertUserPermission(UserPermission instance);
  partial void UpdateUserPermission(UserPermission instance);
  partial void DeleteUserPermission(UserPermission instance);
  partial void InsertUserPermissionUserType(UserPermissionUserType instance);
  partial void UpdateUserPermissionUserType(UserPermissionUserType instance);
  partial void DeleteUserPermissionUserType(UserPermissionUserType instance);
  partial void InsertUserType(UserType instance);
  partial void UpdateUserType(UserType instance);
  partial void DeleteUserType(UserType instance);
  partial void InsertValueFormat(ValueFormat instance);
  partial void UpdateValueFormat(ValueFormat instance);
  partial void DeleteValueFormat(ValueFormat instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AZillionHomesConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Agency> Agencies
	{
		get
		{
			return this.GetTable<Agency>();
		}
	}
	
	public System.Data.Linq.Table<Zipcode> Zipcodes
	{
		get
		{
			return this.GetTable<Zipcode>();
		}
	}
	
	public System.Data.Linq.Table<AlertHistory> AlertHistories
	{
		get
		{
			return this.GetTable<AlertHistory>();
		}
	}
	
	public System.Data.Linq.Table<Announcement> Announcements
	{
		get
		{
			return this.GetTable<Announcement>();
		}
	}
	
	public System.Data.Linq.Table<CellPhoneProvider> CellPhoneProviders
	{
		get
		{
			return this.GetTable<CellPhoneProvider>();
		}
	}
	
	public System.Data.Linq.Table<CMSPage> CMSPages
	{
		get
		{
			return this.GetTable<CMSPage>();
		}
	}
	
	public System.Data.Linq.Table<Continent> Continents
	{
		get
		{
			return this.GetTable<Continent>();
		}
	}
	
	public System.Data.Linq.Table<Country> Countries
	{
		get
		{
			return this.GetTable<Country>();
		}
	}
	
	public System.Data.Linq.Table<Coupon> Coupons
	{
		get
		{
			return this.GetTable<Coupon>();
		}
	}
	
	public System.Data.Linq.Table<FieldType> FieldTypes
	{
		get
		{
			return this.GetTable<FieldType>();
		}
	}
	
	public System.Data.Linq.Table<Form> Forms
	{
		get
		{
			return this.GetTable<Form>();
		}
	}
	
	public System.Data.Linq.Table<FormDocument> FormDocuments
	{
		get
		{
			return this.GetTable<FormDocument>();
		}
	}
	
	public System.Data.Linq.Table<FormEntry> FormEntries
	{
		get
		{
			return this.GetTable<FormEntry>();
		}
	}
	
	public System.Data.Linq.Table<FormEntryArchive> FormEntryArchives
	{
		get
		{
			return this.GetTable<FormEntryArchive>();
		}
	}
	
	public System.Data.Linq.Table<FormEntryCache> FormEntryCaches
	{
		get
		{
			return this.GetTable<FormEntryCache>();
		}
	}
	
	public System.Data.Linq.Table<FormField> FormFields
	{
		get
		{
			return this.GetTable<FormField>();
		}
	}
	
	public System.Data.Linq.Table<FormFieldData> FormFieldDatas
	{
		get
		{
			return this.GetTable<FormFieldData>();
		}
	}
	
	public System.Data.Linq.Table<FormImage> FormImages
	{
		get
		{
			return this.GetTable<FormImage>();
		}
	}
	
	public System.Data.Linq.Table<FormListingType> FormListingTypes
	{
		get
		{
			return this.GetTable<FormListingType>();
		}
	}
	
	public System.Data.Linq.Table<FormSection> FormSections
	{
		get
		{
			return this.GetTable<FormSection>();
		}
	}
	
	public System.Data.Linq.Table<FormView> FormViews
	{
		get
		{
			return this.GetTable<FormView>();
		}
	}
	
	public System.Data.Linq.Table<ListingType> ListingTypes
	{
		get
		{
			return this.GetTable<ListingType>();
		}
	}
	
	public System.Data.Linq.Table<New> News
	{
		get
		{
			return this.GetTable<New>();
		}
	}
	
	public System.Data.Linq.Table<OpenHouseDate> OpenHouseDates
	{
		get
		{
			return this.GetTable<OpenHouseDate>();
		}
	}
	
	public System.Data.Linq.Table<PaymentProfile> PaymentProfiles
	{
		get
		{
			return this.GetTable<PaymentProfile>();
		}
	}
	
	public System.Data.Linq.Table<Price> Prices
	{
		get
		{
			return this.GetTable<Price>();
		}
	}
	
	public System.Data.Linq.Table<SavedFormEntry> SavedFormEntries
	{
		get
		{
			return this.GetTable<SavedFormEntry>();
		}
	}
	
	public System.Data.Linq.Table<SavedSearch> SavedSearches
	{
		get
		{
			return this.GetTable<SavedSearch>();
		}
	}
	
	public System.Data.Linq.Table<SavedSearchFormEntryHistory> SavedSearchFormEntryHistories
	{
		get
		{
			return this.GetTable<SavedSearchFormEntryHistory>();
		}
	}
	
	public System.Data.Linq.Table<State> States
	{
		get
		{
			return this.GetTable<State>();
		}
	}
	
	public System.Data.Linq.Table<Subscription> Subscriptions
	{
		get
		{
			return this.GetTable<Subscription>();
		}
	}
	
	public System.Data.Linq.Table<SubscriptionType> SubscriptionTypes
	{
		get
		{
			return this.GetTable<SubscriptionType>();
		}
	}
	
	public System.Data.Linq.Table<SystemAlert> SystemAlerts
	{
		get
		{
			return this.GetTable<SystemAlert>();
		}
	}
	
	public System.Data.Linq.Table<SystemAlertUserHistory> SystemAlertUserHistories
	{
		get
		{
			return this.GetTable<SystemAlertUserHistory>();
		}
	}
	
	public System.Data.Linq.Table<UserInfo> UserInfos
	{
		get
		{
			return this.GetTable<UserInfo>();
		}
	}
	
	public System.Data.Linq.Table<UserPermission> UserPermissions
	{
		get
		{
			return this.GetTable<UserPermission>();
		}
	}
	
	public System.Data.Linq.Table<UserPermissionUserType> UserPermissionUserTypes
	{
		get
		{
			return this.GetTable<UserPermissionUserType>();
		}
	}
	
	public System.Data.Linq.Table<UserType> UserTypes
	{
		get
		{
			return this.GetTable<UserType>();
		}
	}
	
	public System.Data.Linq.Table<ValueFormat> ValueFormats
	{
		get
		{
			return this.GetTable<ValueFormat>();
		}
	}
}

[Table(Name="dbo.Agency")]
public partial class Agency : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AgencyID;
	
	private string _Name;
	
	private string _Address1;
	
	private string _Address2;
	
	private string _City;
	
	private int _StateID;
	
	private string _ZipCode;
	
	private string _Website;
	
	private string _Email;
	
	private string _Phone;
	
	private string _Fax;
	
	private string _Description;
	
	private int _OwnerUserInfoID;
	
	private string _InvitationCode;
	
	private EntityRef<State> _State;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgencyIDChanging(int value);
    partial void OnAgencyIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnWebsiteChanging(string value);
    partial void OnWebsiteChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOwnerUserInfoIDChanging(int value);
    partial void OnOwnerUserInfoIDChanged();
    partial void OnInvitationCodeChanging(string value);
    partial void OnInvitationCodeChanged();
    #endregion
	
	public Agency()
	{
		this._State = default(EntityRef<State>);
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_AgencyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AgencyID
	{
		get
		{
			return this._AgencyID;
		}
		set
		{
			if ((this._AgencyID != value))
			{
				this.OnAgencyIDChanging(value);
				this.SendPropertyChanging();
				this._AgencyID = value;
				this.SendPropertyChanged("AgencyID");
				this.OnAgencyIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Address1", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Address1
	{
		get
		{
			return this._Address1;
		}
		set
		{
			if ((this._Address1 != value))
			{
				this.OnAddress1Changing(value);
				this.SendPropertyChanging();
				this._Address1 = value;
				this.SendPropertyChanged("Address1");
				this.OnAddress1Changed();
			}
		}
	}
	
	[Column(Storage="_Address2", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Address2
	{
		get
		{
			return this._Address2;
		}
		set
		{
			if ((this._Address2 != value))
			{
				this.OnAddress2Changing(value);
				this.SendPropertyChanging();
				this._Address2 = value;
				this.SendPropertyChanged("Address2");
				this.OnAddress2Changed();
			}
		}
	}
	
	[Column(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_StateID", DbType="Int NOT NULL")]
	public int StateID
	{
		get
		{
			return this._StateID;
		}
		set
		{
			if ((this._StateID != value))
			{
				if (this._State.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStateIDChanging(value);
				this.SendPropertyChanging();
				this._StateID = value;
				this.SendPropertyChanged("StateID");
				this.OnStateIDChanged();
			}
		}
	}
	
	[Column(Storage="_ZipCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string ZipCode
	{
		get
		{
			return this._ZipCode;
		}
		set
		{
			if ((this._ZipCode != value))
			{
				this.OnZipCodeChanging(value);
				this.SendPropertyChanging();
				this._ZipCode = value;
				this.SendPropertyChanged("ZipCode");
				this.OnZipCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Website", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Website
	{
		get
		{
			return this._Website;
		}
		set
		{
			if ((this._Website != value))
			{
				this.OnWebsiteChanging(value);
				this.SendPropertyChanging();
				this._Website = value;
				this.SendPropertyChanged("Website");
				this.OnWebsiteChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_Fax", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Fax
	{
		get
		{
			return this._Fax;
		}
		set
		{
			if ((this._Fax != value))
			{
				this.OnFaxChanging(value);
				this.SendPropertyChanging();
				this._Fax = value;
				this.SendPropertyChanged("Fax");
				this.OnFaxChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_OwnerUserInfoID", DbType="Int NOT NULL")]
	public int OwnerUserInfoID
	{
		get
		{
			return this._OwnerUserInfoID;
		}
		set
		{
			if ((this._OwnerUserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnOwnerUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._OwnerUserInfoID = value;
				this.SendPropertyChanged("OwnerUserInfoID");
				this.OnOwnerUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_InvitationCode", DbType="VarChar(50)")]
	public string InvitationCode
	{
		get
		{
			return this._InvitationCode;
		}
		set
		{
			if ((this._InvitationCode != value))
			{
				this.OnInvitationCodeChanging(value);
				this.SendPropertyChanging();
				this._InvitationCode = value;
				this.SendPropertyChanged("InvitationCode");
				this.OnInvitationCodeChanged();
			}
		}
	}
	
	[Association(Name="State_Agency", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
	public State State
	{
		get
		{
			return this._State.Entity;
		}
		set
		{
			State previousValue = this._State.Entity;
			if (((previousValue != value) 
						|| (this._State.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._State.Entity = null;
					previousValue.Agencies.Remove(this);
				}
				this._State.Entity = value;
				if ((value != null))
				{
					value.Agencies.Add(this);
					this._StateID = value.StateID;
				}
				else
				{
					this._StateID = default(int);
				}
				this.SendPropertyChanged("State");
			}
		}
	}
	
	[Association(Name="UserInfo_Agency", Storage="_UserInfo", ThisKey="OwnerUserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.Agencies.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.Agencies.Add(this);
					this._OwnerUserInfoID = value.UserInfoID;
				}
				else
				{
					this._OwnerUserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Zipcode")]
public partial class Zipcode : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ZipcodeID;
	
	private string _Zipcode1;
	
	private string _Abbreviation;
	
	private double _Latitude;
	
	private double _Longitude;
	
	private string _City;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZipcodeIDChanging(int value);
    partial void OnZipcodeIDChanged();
    partial void OnZipcode1Changing(string value);
    partial void OnZipcode1Changed();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    #endregion
	
	public Zipcode()
	{
		OnCreated();
	}
	
	[Column(Storage="_ZipcodeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ZipcodeID
	{
		get
		{
			return this._ZipcodeID;
		}
		set
		{
			if ((this._ZipcodeID != value))
			{
				this.OnZipcodeIDChanging(value);
				this.SendPropertyChanging();
				this._ZipcodeID = value;
				this.SendPropertyChanged("ZipcodeID");
				this.OnZipcodeIDChanged();
			}
		}
	}
	
	[Column(Name="Zipcode", Storage="_Zipcode1", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
	public string Zipcode1
	{
		get
		{
			return this._Zipcode1;
		}
		set
		{
			if ((this._Zipcode1 != value))
			{
				this.OnZipcode1Changing(value);
				this.SendPropertyChanging();
				this._Zipcode1 = value;
				this.SendPropertyChanged("Zipcode1");
				this.OnZipcode1Changed();
			}
		}
	}
	
	[Column(Storage="_Abbreviation", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
	public string Abbreviation
	{
		get
		{
			return this._Abbreviation;
		}
		set
		{
			if ((this._Abbreviation != value))
			{
				this.OnAbbreviationChanging(value);
				this.SendPropertyChanging();
				this._Abbreviation = value;
				this.SendPropertyChanged("Abbreviation");
				this.OnAbbreviationChanged();
			}
		}
	}
	
	[Column(Storage="_Latitude", DbType="Float NOT NULL")]
	public double Latitude
	{
		get
		{
			return this._Latitude;
		}
		set
		{
			if ((this._Latitude != value))
			{
				this.OnLatitudeChanging(value);
				this.SendPropertyChanging();
				this._Latitude = value;
				this.SendPropertyChanged("Latitude");
				this.OnLatitudeChanged();
			}
		}
	}
	
	[Column(Storage="_Longitude", DbType="Float NOT NULL")]
	public double Longitude
	{
		get
		{
			return this._Longitude;
		}
		set
		{
			if ((this._Longitude != value))
			{
				this.OnLongitudeChanging(value);
				this.SendPropertyChanging();
				this._Longitude = value;
				this.SendPropertyChanged("Longitude");
				this.OnLongitudeChanged();
			}
		}
	}
	
	[Column(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.AlertHistory")]
public partial class AlertHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AlertHistoryID;
	
	private string _AlertName;
	
	private System.Nullable<System.DateTime> _DateStarted;
	
	private System.Nullable<System.DateTime> _DateFinished;
	
	private System.Nullable<int> _NumRecipients;
	
	private string _UserIDs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertHistoryIDChanging(int value);
    partial void OnAlertHistoryIDChanged();
    partial void OnAlertNameChanging(string value);
    partial void OnAlertNameChanged();
    partial void OnDateStartedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateStartedChanged();
    partial void OnDateFinishedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinishedChanged();
    partial void OnNumRecipientsChanging(System.Nullable<int> value);
    partial void OnNumRecipientsChanged();
    partial void OnUserIDsChanging(string value);
    partial void OnUserIDsChanged();
    #endregion
	
	public AlertHistory()
	{
		OnCreated();
	}
	
	[Column(Storage="_AlertHistoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AlertHistoryID
	{
		get
		{
			return this._AlertHistoryID;
		}
		set
		{
			if ((this._AlertHistoryID != value))
			{
				this.OnAlertHistoryIDChanging(value);
				this.SendPropertyChanging();
				this._AlertHistoryID = value;
				this.SendPropertyChanged("AlertHistoryID");
				this.OnAlertHistoryIDChanged();
			}
		}
	}
	
	[Column(Storage="_AlertName", DbType="VarChar(50)")]
	public string AlertName
	{
		get
		{
			return this._AlertName;
		}
		set
		{
			if ((this._AlertName != value))
			{
				this.OnAlertNameChanging(value);
				this.SendPropertyChanging();
				this._AlertName = value;
				this.SendPropertyChanged("AlertName");
				this.OnAlertNameChanged();
			}
		}
	}
	
	[Column(Storage="_DateStarted", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> DateStarted
	{
		get
		{
			return this._DateStarted;
		}
		set
		{
			if ((this._DateStarted != value))
			{
				this.OnDateStartedChanging(value);
				this.SendPropertyChanging();
				this._DateStarted = value;
				this.SendPropertyChanged("DateStarted");
				this.OnDateStartedChanged();
			}
		}
	}
	
	[Column(Storage="_DateFinished", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> DateFinished
	{
		get
		{
			return this._DateFinished;
		}
		set
		{
			if ((this._DateFinished != value))
			{
				this.OnDateFinishedChanging(value);
				this.SendPropertyChanging();
				this._DateFinished = value;
				this.SendPropertyChanged("DateFinished");
				this.OnDateFinishedChanged();
			}
		}
	}
	
	[Column(Storage="_NumRecipients", DbType="Int")]
	public System.Nullable<int> NumRecipients
	{
		get
		{
			return this._NumRecipients;
		}
		set
		{
			if ((this._NumRecipients != value))
			{
				this.OnNumRecipientsChanging(value);
				this.SendPropertyChanging();
				this._NumRecipients = value;
				this.SendPropertyChanged("NumRecipients");
				this.OnNumRecipientsChanged();
			}
		}
	}
	
	[Column(Storage="_UserIDs", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string UserIDs
	{
		get
		{
			return this._UserIDs;
		}
		set
		{
			if ((this._UserIDs != value))
			{
				this.OnUserIDsChanging(value);
				this.SendPropertyChanging();
				this._UserIDs = value;
				this.SendPropertyChanged("UserIDs");
				this.OnUserIDsChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Announcement")]
public partial class Announcement : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _AnnouncementID;
	
	private int _UserInfoID;
	
	private string _Title;
	
	private System.DateTime _Created;
	
	private string _Teaser;
	
	private string _Body;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAnnouncementIDChanging(int value);
    partial void OnAnnouncementIDChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnTeaserChanging(string value);
    partial void OnTeaserChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    #endregion
	
	public Announcement()
	{
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_AnnouncementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int AnnouncementID
	{
		get
		{
			return this._AnnouncementID;
		}
		set
		{
			if ((this._AnnouncementID != value))
			{
				this.OnAnnouncementIDChanging(value);
				this.SendPropertyChanging();
				this._AnnouncementID = value;
				this.SendPropertyChanged("AnnouncementID");
				this.OnAnnouncementIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_Teaser", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Teaser
	{
		get
		{
			return this._Teaser;
		}
		set
		{
			if ((this._Teaser != value))
			{
				this.OnTeaserChanging(value);
				this.SendPropertyChanging();
				this._Teaser = value;
				this.SendPropertyChanged("Teaser");
				this.OnTeaserChanged();
			}
		}
	}
	
	[Column(Storage="_Body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Body
	{
		get
		{
			return this._Body;
		}
		set
		{
			if ((this._Body != value))
			{
				this.OnBodyChanging(value);
				this.SendPropertyChanging();
				this._Body = value;
				this.SendPropertyChanged("Body");
				this.OnBodyChanged();
			}
		}
	}
	
	[Association(Name="UserInfo_Announcement", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.Announcements.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.Announcements.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CellPhoneProvider")]
public partial class CellPhoneProvider : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CellPhoneProviderID;
	
	private string _Name;
	
	private string _EmailAddress;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCellPhoneProviderIDChanging(int value);
    partial void OnCellPhoneProviderIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    #endregion
	
	public CellPhoneProvider()
	{
		OnCreated();
	}
	
	[Column(Storage="_CellPhoneProviderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CellPhoneProviderID
	{
		get
		{
			return this._CellPhoneProviderID;
		}
		set
		{
			if ((this._CellPhoneProviderID != value))
			{
				this.OnCellPhoneProviderIDChanging(value);
				this.SendPropertyChanging();
				this._CellPhoneProviderID = value;
				this.SendPropertyChanged("CellPhoneProviderID");
				this.OnCellPhoneProviderIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_EmailAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string EmailAddress
	{
		get
		{
			return this._EmailAddress;
		}
		set
		{
			if ((this._EmailAddress != value))
			{
				this.OnEmailAddressChanging(value);
				this.SendPropertyChanging();
				this._EmailAddress = value;
				this.SendPropertyChanged("EmailAddress");
				this.OnEmailAddressChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.CMSPage")]
public partial class CMSPage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CMSPageID;
	
	private string _PageTitle;
	
	private string _MetaDescription;
	
	private string _MetaKeywords;
	
	private string _PageContent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCMSPageIDChanging(int value);
    partial void OnCMSPageIDChanged();
    partial void OnPageTitleChanging(string value);
    partial void OnPageTitleChanged();
    partial void OnMetaDescriptionChanging(string value);
    partial void OnMetaDescriptionChanged();
    partial void OnMetaKeywordsChanging(string value);
    partial void OnMetaKeywordsChanged();
    partial void OnPageContentChanging(string value);
    partial void OnPageContentChanged();
    #endregion
	
	public CMSPage()
	{
		OnCreated();
	}
	
	[Column(Storage="_CMSPageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CMSPageID
	{
		get
		{
			return this._CMSPageID;
		}
		set
		{
			if ((this._CMSPageID != value))
			{
				this.OnCMSPageIDChanging(value);
				this.SendPropertyChanging();
				this._CMSPageID = value;
				this.SendPropertyChanged("CMSPageID");
				this.OnCMSPageIDChanged();
			}
		}
	}
	
	[Column(Storage="_PageTitle", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string PageTitle
	{
		get
		{
			return this._PageTitle;
		}
		set
		{
			if ((this._PageTitle != value))
			{
				this.OnPageTitleChanging(value);
				this.SendPropertyChanging();
				this._PageTitle = value;
				this.SendPropertyChanged("PageTitle");
				this.OnPageTitleChanged();
			}
		}
	}
	
	[Column(Storage="_MetaDescription", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string MetaDescription
	{
		get
		{
			return this._MetaDescription;
		}
		set
		{
			if ((this._MetaDescription != value))
			{
				this.OnMetaDescriptionChanging(value);
				this.SendPropertyChanging();
				this._MetaDescription = value;
				this.SendPropertyChanged("MetaDescription");
				this.OnMetaDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_MetaKeywords", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string MetaKeywords
	{
		get
		{
			return this._MetaKeywords;
		}
		set
		{
			if ((this._MetaKeywords != value))
			{
				this.OnMetaKeywordsChanging(value);
				this.SendPropertyChanging();
				this._MetaKeywords = value;
				this.SendPropertyChanged("MetaKeywords");
				this.OnMetaKeywordsChanged();
			}
		}
	}
	
	[Column(Storage="_PageContent", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string PageContent
	{
		get
		{
			return this._PageContent;
		}
		set
		{
			if ((this._PageContent != value))
			{
				this.OnPageContentChanging(value);
				this.SendPropertyChanging();
				this._PageContent = value;
				this.SendPropertyChanged("PageContent");
				this.OnPageContentChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Continent")]
public partial class Continent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ContinentID;
	
	private string _Name;
	
	private EntitySet<Country> _Countries;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContinentIDChanging(int value);
    partial void OnContinentIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public Continent()
	{
		this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
		OnCreated();
	}
	
	[Column(Storage="_ContinentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ContinentID
	{
		get
		{
			return this._ContinentID;
		}
		set
		{
			if ((this._ContinentID != value))
			{
				this.OnContinentIDChanging(value);
				this.SendPropertyChanging();
				this._ContinentID = value;
				this.SendPropertyChanged("ContinentID");
				this.OnContinentIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="Continent_Country", Storage="_Countries", ThisKey="ContinentID", OtherKey="ContinentID")]
	public EntitySet<Country> Countries
	{
		get
		{
			return this._Countries;
		}
		set
		{
			this._Countries.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Countries(Country entity)
	{
		this.SendPropertyChanging();
		entity.Continent = this;
	}
	
	private void detach_Countries(Country entity)
	{
		this.SendPropertyChanging();
		entity.Continent = null;
	}
}

[Table(Name="dbo.Country")]
public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CountryID;
	
	private string _Name;
	
	private string _Capital;
	
	private System.Nullable<bool> _ECommerceSafe;
	
	private string _Language;
	
	private int _ContinentID;
	
	private string _Abbreviation;
	
	private EntitySet<State> _States;
	
	private EntityRef<Continent> _Continent;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCapitalChanging(string value);
    partial void OnCapitalChanged();
    partial void OnECommerceSafeChanging(System.Nullable<bool> value);
    partial void OnECommerceSafeChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnContinentIDChanging(int value);
    partial void OnContinentIDChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    #endregion
	
	public Country()
	{
		this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
		this._Continent = default(EntityRef<Continent>);
		OnCreated();
	}
	
	[Column(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Capital", DbType="VarChar(50)")]
	public string Capital
	{
		get
		{
			return this._Capital;
		}
		set
		{
			if ((this._Capital != value))
			{
				this.OnCapitalChanging(value);
				this.SendPropertyChanging();
				this._Capital = value;
				this.SendPropertyChanged("Capital");
				this.OnCapitalChanged();
			}
		}
	}
	
	[Column(Storage="_ECommerceSafe", DbType="Bit")]
	public System.Nullable<bool> ECommerceSafe
	{
		get
		{
			return this._ECommerceSafe;
		}
		set
		{
			if ((this._ECommerceSafe != value))
			{
				this.OnECommerceSafeChanging(value);
				this.SendPropertyChanging();
				this._ECommerceSafe = value;
				this.SendPropertyChanged("ECommerceSafe");
				this.OnECommerceSafeChanged();
			}
		}
	}
	
	[Column(Storage="_Language", DbType="VarChar(50)")]
	public string Language
	{
		get
		{
			return this._Language;
		}
		set
		{
			if ((this._Language != value))
			{
				this.OnLanguageChanging(value);
				this.SendPropertyChanging();
				this._Language = value;
				this.SendPropertyChanged("Language");
				this.OnLanguageChanged();
			}
		}
	}
	
	[Column(Storage="_ContinentID", DbType="Int NOT NULL")]
	public int ContinentID
	{
		get
		{
			return this._ContinentID;
		}
		set
		{
			if ((this._ContinentID != value))
			{
				if (this._Continent.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnContinentIDChanging(value);
				this.SendPropertyChanging();
				this._ContinentID = value;
				this.SendPropertyChanged("ContinentID");
				this.OnContinentIDChanged();
			}
		}
	}
	
	[Column(Storage="_Abbreviation", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string Abbreviation
	{
		get
		{
			return this._Abbreviation;
		}
		set
		{
			if ((this._Abbreviation != value))
			{
				this.OnAbbreviationChanging(value);
				this.SendPropertyChanging();
				this._Abbreviation = value;
				this.SendPropertyChanged("Abbreviation");
				this.OnAbbreviationChanged();
			}
		}
	}
	
	[Association(Name="Country_State", Storage="_States", ThisKey="CountryID", OtherKey="CountryID")]
	public EntitySet<State> States
	{
		get
		{
			return this._States;
		}
		set
		{
			this._States.Assign(value);
		}
	}
	
	[Association(Name="Continent_Country", Storage="_Continent", ThisKey="ContinentID", OtherKey="ContinentID", IsForeignKey=true)]
	public Continent Continent
	{
		get
		{
			return this._Continent.Entity;
		}
		set
		{
			Continent previousValue = this._Continent.Entity;
			if (((previousValue != value) 
						|| (this._Continent.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Continent.Entity = null;
					previousValue.Countries.Remove(this);
				}
				this._Continent.Entity = value;
				if ((value != null))
				{
					value.Countries.Add(this);
					this._ContinentID = value.ContinentID;
				}
				else
				{
					this._ContinentID = default(int);
				}
				this.SendPropertyChanged("Continent");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_States(State entity)
	{
		this.SendPropertyChanging();
		entity.Country = this;
	}
	
	private void detach_States(State entity)
	{
		this.SendPropertyChanging();
		entity.Country = null;
	}
}

[Table(Name="dbo.Coupon")]
public partial class Coupon : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _CouponID;
	
	private string _Name;
	
	private string _Description;
	
	private string _CouponCode;
	
	private string _CouponType;
	
	private int _CouponAmount;
	
	private int _TotalUses;
	
	private int _Used;
	
	private System.Nullable<System.DateTime> _Expires;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCouponIDChanging(int value);
    partial void OnCouponIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCouponCodeChanging(string value);
    partial void OnCouponCodeChanged();
    partial void OnCouponTypeChanging(string value);
    partial void OnCouponTypeChanged();
    partial void OnCouponAmountChanging(int value);
    partial void OnCouponAmountChanged();
    partial void OnTotalUsesChanging(int value);
    partial void OnTotalUsesChanged();
    partial void OnUsedChanging(int value);
    partial void OnUsedChanged();
    partial void OnExpiresChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiresChanged();
    #endregion
	
	public Coupon()
	{
		OnCreated();
	}
	
	[Column(Storage="_CouponID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int CouponID
	{
		get
		{
			return this._CouponID;
		}
		set
		{
			if ((this._CouponID != value))
			{
				this.OnCouponIDChanging(value);
				this.SendPropertyChanging();
				this._CouponID = value;
				this.SendPropertyChanged("CouponID");
				this.OnCouponIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_CouponCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string CouponCode
	{
		get
		{
			return this._CouponCode;
		}
		set
		{
			if ((this._CouponCode != value))
			{
				this.OnCouponCodeChanging(value);
				this.SendPropertyChanging();
				this._CouponCode = value;
				this.SendPropertyChanged("CouponCode");
				this.OnCouponCodeChanged();
			}
		}
	}
	
	[Column(Storage="_CouponType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string CouponType
	{
		get
		{
			return this._CouponType;
		}
		set
		{
			if ((this._CouponType != value))
			{
				this.OnCouponTypeChanging(value);
				this.SendPropertyChanging();
				this._CouponType = value;
				this.SendPropertyChanged("CouponType");
				this.OnCouponTypeChanged();
			}
		}
	}
	
	[Column(Storage="_CouponAmount", DbType="Int NOT NULL")]
	public int CouponAmount
	{
		get
		{
			return this._CouponAmount;
		}
		set
		{
			if ((this._CouponAmount != value))
			{
				this.OnCouponAmountChanging(value);
				this.SendPropertyChanging();
				this._CouponAmount = value;
				this.SendPropertyChanged("CouponAmount");
				this.OnCouponAmountChanged();
			}
		}
	}
	
	[Column(Storage="_TotalUses", DbType="Int NOT NULL")]
	public int TotalUses
	{
		get
		{
			return this._TotalUses;
		}
		set
		{
			if ((this._TotalUses != value))
			{
				this.OnTotalUsesChanging(value);
				this.SendPropertyChanging();
				this._TotalUses = value;
				this.SendPropertyChanged("TotalUses");
				this.OnTotalUsesChanged();
			}
		}
	}
	
	[Column(Storage="_Used", DbType="Int NOT NULL")]
	public int Used
	{
		get
		{
			return this._Used;
		}
		set
		{
			if ((this._Used != value))
			{
				this.OnUsedChanging(value);
				this.SendPropertyChanging();
				this._Used = value;
				this.SendPropertyChanged("Used");
				this.OnUsedChanged();
			}
		}
	}
	
	[Column(Storage="_Expires", DbType="DateTime")]
	public System.Nullable<System.DateTime> Expires
	{
		get
		{
			return this._Expires;
		}
		set
		{
			if ((this._Expires != value))
			{
				this.OnExpiresChanging(value);
				this.SendPropertyChanging();
				this._Expires = value;
				this.SendPropertyChanged("Expires");
				this.OnExpiresChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FieldType")]
public partial class FieldType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FieldTypeID;
	
	private string _Name;
	
	private string _RenderControl;
	
	private string _EditControl;
	
	private int _ValueFormatID;
	
	private EntitySet<FormField> _FormFields;
	
	private EntityRef<ValueFormat> _ValueFormat;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldTypeIDChanging(int value);
    partial void OnFieldTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRenderControlChanging(string value);
    partial void OnRenderControlChanged();
    partial void OnEditControlChanging(string value);
    partial void OnEditControlChanged();
    partial void OnValueFormatIDChanging(int value);
    partial void OnValueFormatIDChanged();
    #endregion
	
	public FieldType()
	{
		this._FormFields = new EntitySet<FormField>(new Action<FormField>(this.attach_FormFields), new Action<FormField>(this.detach_FormFields));
		this._ValueFormat = default(EntityRef<ValueFormat>);
		OnCreated();
	}
	
	[Column(Storage="_FieldTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FieldTypeID
	{
		get
		{
			return this._FieldTypeID;
		}
		set
		{
			if ((this._FieldTypeID != value))
			{
				this.OnFieldTypeIDChanging(value);
				this.SendPropertyChanging();
				this._FieldTypeID = value;
				this.SendPropertyChanged("FieldTypeID");
				this.OnFieldTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_RenderControl", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string RenderControl
	{
		get
		{
			return this._RenderControl;
		}
		set
		{
			if ((this._RenderControl != value))
			{
				this.OnRenderControlChanging(value);
				this.SendPropertyChanging();
				this._RenderControl = value;
				this.SendPropertyChanged("RenderControl");
				this.OnRenderControlChanged();
			}
		}
	}
	
	[Column(Storage="_EditControl", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string EditControl
	{
		get
		{
			return this._EditControl;
		}
		set
		{
			if ((this._EditControl != value))
			{
				this.OnEditControlChanging(value);
				this.SendPropertyChanging();
				this._EditControl = value;
				this.SendPropertyChanged("EditControl");
				this.OnEditControlChanged();
			}
		}
	}
	
	[Column(Storage="_ValueFormatID", DbType="Int NOT NULL")]
	public int ValueFormatID
	{
		get
		{
			return this._ValueFormatID;
		}
		set
		{
			if ((this._ValueFormatID != value))
			{
				if (this._ValueFormat.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnValueFormatIDChanging(value);
				this.SendPropertyChanging();
				this._ValueFormatID = value;
				this.SendPropertyChanged("ValueFormatID");
				this.OnValueFormatIDChanged();
			}
		}
	}
	
	[Association(Name="FieldType_FormField", Storage="_FormFields", ThisKey="FieldTypeID", OtherKey="FieldTypeID")]
	public EntitySet<FormField> FormFields
	{
		get
		{
			return this._FormFields;
		}
		set
		{
			this._FormFields.Assign(value);
		}
	}
	
	[Association(Name="ValueFormat_FieldType", Storage="_ValueFormat", ThisKey="ValueFormatID", OtherKey="ValueFormatID", IsForeignKey=true)]
	public ValueFormat ValueFormat
	{
		get
		{
			return this._ValueFormat.Entity;
		}
		set
		{
			ValueFormat previousValue = this._ValueFormat.Entity;
			if (((previousValue != value) 
						|| (this._ValueFormat.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ValueFormat.Entity = null;
					previousValue.FieldTypes.Remove(this);
				}
				this._ValueFormat.Entity = value;
				if ((value != null))
				{
					value.FieldTypes.Add(this);
					this._ValueFormatID = value.ValueFormatID;
				}
				else
				{
					this._ValueFormatID = default(int);
				}
				this.SendPropertyChanged("ValueFormat");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FormFields(FormField entity)
	{
		this.SendPropertyChanging();
		entity.FieldType = this;
	}
	
	private void detach_FormFields(FormField entity)
	{
		this.SendPropertyChanging();
		entity.FieldType = null;
	}
}

[Table(Name="dbo.Form")]
public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormID;
	
	private string _Name;
	
	private string _Description;
	
	private bool _Active;
	
	private bool _RequiresPrice;
	
	private bool _RequiresDate;
	
	private bool _RequiresBedBath;
	
	private EntitySet<FormEntry> _FormEntries;
	
	private EntitySet<FormListingType> _FormListingTypes;
	
	private EntitySet<FormSection> _FormSections;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormIDChanging(int value);
    partial void OnFormIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnRequiresPriceChanging(bool value);
    partial void OnRequiresPriceChanged();
    partial void OnRequiresDateChanging(bool value);
    partial void OnRequiresDateChanged();
    partial void OnRequiresBedBathChanging(bool value);
    partial void OnRequiresBedBathChanged();
    #endregion
	
	public Form()
	{
		this._FormEntries = new EntitySet<FormEntry>(new Action<FormEntry>(this.attach_FormEntries), new Action<FormEntry>(this.detach_FormEntries));
		this._FormListingTypes = new EntitySet<FormListingType>(new Action<FormListingType>(this.attach_FormListingTypes), new Action<FormListingType>(this.detach_FormListingTypes));
		this._FormSections = new EntitySet<FormSection>(new Action<FormSection>(this.attach_FormSections), new Action<FormSection>(this.detach_FormSections));
		OnCreated();
	}
	
	[Column(Storage="_FormID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormID
	{
		get
		{
			return this._FormID;
		}
		set
		{
			if ((this._FormID != value))
			{
				this.OnFormIDChanging(value);
				this.SendPropertyChanging();
				this._FormID = value;
				this.SendPropertyChanged("FormID");
				this.OnFormIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="Bit NOT NULL")]
	public bool Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_RequiresPrice", DbType="Bit NOT NULL")]
	public bool RequiresPrice
	{
		get
		{
			return this._RequiresPrice;
		}
		set
		{
			if ((this._RequiresPrice != value))
			{
				this.OnRequiresPriceChanging(value);
				this.SendPropertyChanging();
				this._RequiresPrice = value;
				this.SendPropertyChanged("RequiresPrice");
				this.OnRequiresPriceChanged();
			}
		}
	}
	
	[Column(Storage="_RequiresDate", DbType="Bit NOT NULL")]
	public bool RequiresDate
	{
		get
		{
			return this._RequiresDate;
		}
		set
		{
			if ((this._RequiresDate != value))
			{
				this.OnRequiresDateChanging(value);
				this.SendPropertyChanging();
				this._RequiresDate = value;
				this.SendPropertyChanged("RequiresDate");
				this.OnRequiresDateChanged();
			}
		}
	}
	
	[Column(Storage="_RequiresBedBath", DbType="Bit NOT NULL")]
	public bool RequiresBedBath
	{
		get
		{
			return this._RequiresBedBath;
		}
		set
		{
			if ((this._RequiresBedBath != value))
			{
				this.OnRequiresBedBathChanging(value);
				this.SendPropertyChanging();
				this._RequiresBedBath = value;
				this.SendPropertyChanged("RequiresBedBath");
				this.OnRequiresBedBathChanged();
			}
		}
	}
	
	[Association(Name="Form_FormEntry", Storage="_FormEntries", ThisKey="FormID", OtherKey="FormID")]
	public EntitySet<FormEntry> FormEntries
	{
		get
		{
			return this._FormEntries;
		}
		set
		{
			this._FormEntries.Assign(value);
		}
	}
	
	[Association(Name="Form_FormListingType", Storage="_FormListingTypes", ThisKey="FormID", OtherKey="FormID")]
	public EntitySet<FormListingType> FormListingTypes
	{
		get
		{
			return this._FormListingTypes;
		}
		set
		{
			this._FormListingTypes.Assign(value);
		}
	}
	
	[Association(Name="Form_FormSection", Storage="_FormSections", ThisKey="FormID", OtherKey="FormID")]
	public EntitySet<FormSection> FormSections
	{
		get
		{
			return this._FormSections;
		}
		set
		{
			this._FormSections.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.Form = this;
	}
	
	private void detach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.Form = null;
	}
	
	private void attach_FormListingTypes(FormListingType entity)
	{
		this.SendPropertyChanging();
		entity.Form = this;
	}
	
	private void detach_FormListingTypes(FormListingType entity)
	{
		this.SendPropertyChanging();
		entity.Form = null;
	}
	
	private void attach_FormSections(FormSection entity)
	{
		this.SendPropertyChanging();
		entity.Form = this;
	}
	
	private void detach_FormSections(FormSection entity)
	{
		this.SendPropertyChanging();
		entity.Form = null;
	}
}

[Table(Name="dbo.FormDocument")]
public partial class FormDocument : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormDocumentID;
	
	private int _FormEntryID;
	
	private string _Name;
	
	private string _Filename;
	
	private int _SortOrder;
	
	private EntityRef<FormEntry> _FormEntry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormDocumentIDChanging(int value);
    partial void OnFormDocumentIDChanged();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
	
	public FormDocument()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		OnCreated();
	}
	
	[Column(Storage="_FormDocumentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormDocumentID
	{
		get
		{
			return this._FormDocumentID;
		}
		set
		{
			if ((this._FormDocumentID != value))
			{
				this.OnFormDocumentIDChanging(value);
				this.SendPropertyChanging();
				this._FormDocumentID = value;
				this.SendPropertyChanged("FormDocumentID");
				this.OnFormDocumentIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int NOT NULL")]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Filename", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Filename
	{
		get
		{
			return this._Filename;
		}
		set
		{
			if ((this._Filename != value))
			{
				this.OnFilenameChanging(value);
				this.SendPropertyChanging();
				this._Filename = value;
				this.SendPropertyChanged("Filename");
				this.OnFilenameChanged();
			}
		}
	}
	
	[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
	public int SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_FormDocument", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.FormDocuments.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.FormDocuments.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(int);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FormEntry")]
public partial class FormEntry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormEntryID;
	
	private string _AZHID;
	
	private int _FormID;
	
	private int _UserInfoID;
	
	private int _ListingTypeID;
	
	private int _Price;
	
	private string _StreetNumber;
	
	private string _StreetName;
	
	private string _City;
	
	private int _StateID;
	
	private string _ZipCode;
	
	private string _Description;
	
	private string _Directions;
	
	private int _TotalRooms;
	
	private int _Bedrooms;
	
	private string _Bathrooms;
	
	private string _SearchableFields;
	
	private string _Entry;
	
	private System.DateTime _EntryDate;
	
	private bool _Completed;
	
	private bool _Paid;
	
	private bool _Active;
	
	private System.Nullable<System.DateTime> _Expires;
	
	private System.Nullable<System.DateTime> _EventStart;
	
	private EntitySet<FormDocument> _FormDocuments;
	
	private EntitySet<FormEntryCache> _FormEntryCaches;
	
	private EntitySet<FormFieldData> _FormFieldDatas;
	
	private EntitySet<FormImage> _FormImages;
	
	private EntitySet<FormView> _FormViews;
	
	private EntitySet<OpenHouseDate> _OpenHouseDates;
	
	private EntitySet<SavedFormEntry> _SavedFormEntries;
	
	private EntitySet<SavedSearchFormEntryHistory> _SavedSearchFormEntryHistories;
	
	private EntityRef<Form> _Form;
	
	private EntityRef<ListingType> _ListingType;
	
	private EntityRef<State> _State;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnAZHIDChanging(string value);
    partial void OnAZHIDChanged();
    partial void OnFormIDChanging(int value);
    partial void OnFormIDChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnListingTypeIDChanging(int value);
    partial void OnListingTypeIDChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnStreetNumberChanging(string value);
    partial void OnStreetNumberChanged();
    partial void OnStreetNameChanging(string value);
    partial void OnStreetNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDirectionsChanging(string value);
    partial void OnDirectionsChanged();
    partial void OnTotalRoomsChanging(int value);
    partial void OnTotalRoomsChanged();
    partial void OnBedroomsChanging(int value);
    partial void OnBedroomsChanged();
    partial void OnBathroomsChanging(string value);
    partial void OnBathroomsChanged();
    partial void OnSearchableFieldsChanging(string value);
    partial void OnSearchableFieldsChanged();
    partial void OnEntryChanging(string value);
    partial void OnEntryChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnPaidChanging(bool value);
    partial void OnPaidChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnExpiresChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiresChanged();
    partial void OnEventStartChanging(System.Nullable<System.DateTime> value);
    partial void OnEventStartChanged();
    #endregion
	
	public FormEntry()
	{
		this._FormDocuments = new EntitySet<FormDocument>(new Action<FormDocument>(this.attach_FormDocuments), new Action<FormDocument>(this.detach_FormDocuments));
		this._FormEntryCaches = new EntitySet<FormEntryCache>(new Action<FormEntryCache>(this.attach_FormEntryCaches), new Action<FormEntryCache>(this.detach_FormEntryCaches));
		this._FormFieldDatas = new EntitySet<FormFieldData>(new Action<FormFieldData>(this.attach_FormFieldDatas), new Action<FormFieldData>(this.detach_FormFieldDatas));
		this._FormImages = new EntitySet<FormImage>(new Action<FormImage>(this.attach_FormImages), new Action<FormImage>(this.detach_FormImages));
		this._FormViews = new EntitySet<FormView>(new Action<FormView>(this.attach_FormViews), new Action<FormView>(this.detach_FormViews));
		this._OpenHouseDates = new EntitySet<OpenHouseDate>(new Action<OpenHouseDate>(this.attach_OpenHouseDates), new Action<OpenHouseDate>(this.detach_OpenHouseDates));
		this._SavedFormEntries = new EntitySet<SavedFormEntry>(new Action<SavedFormEntry>(this.attach_SavedFormEntries), new Action<SavedFormEntry>(this.detach_SavedFormEntries));
		this._SavedSearchFormEntryHistories = new EntitySet<SavedSearchFormEntryHistory>(new Action<SavedSearchFormEntryHistory>(this.attach_SavedSearchFormEntryHistories), new Action<SavedSearchFormEntryHistory>(this.detach_SavedSearchFormEntryHistories));
		this._Form = default(EntityRef<Form>);
		this._ListingType = default(EntityRef<ListingType>);
		this._State = default(EntityRef<State>);
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_FormEntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_AZHID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string AZHID
	{
		get
		{
			return this._AZHID;
		}
		set
		{
			if ((this._AZHID != value))
			{
				this.OnAZHIDChanging(value);
				this.SendPropertyChanging();
				this._AZHID = value;
				this.SendPropertyChanged("AZHID");
				this.OnAZHIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormID", DbType="Int NOT NULL")]
	public int FormID
	{
		get
		{
			return this._FormID;
		}
		set
		{
			if ((this._FormID != value))
			{
				if (this._Form.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormIDChanging(value);
				this.SendPropertyChanging();
				this._FormID = value;
				this.SendPropertyChanged("FormID");
				this.OnFormIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_ListingTypeID", DbType="Int NOT NULL")]
	public int ListingTypeID
	{
		get
		{
			return this._ListingTypeID;
		}
		set
		{
			if ((this._ListingTypeID != value))
			{
				if (this._ListingType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnListingTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ListingTypeID = value;
				this.SendPropertyChanged("ListingTypeID");
				this.OnListingTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Int NOT NULL")]
	public int Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_StreetNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string StreetNumber
	{
		get
		{
			return this._StreetNumber;
		}
		set
		{
			if ((this._StreetNumber != value))
			{
				this.OnStreetNumberChanging(value);
				this.SendPropertyChanging();
				this._StreetNumber = value;
				this.SendPropertyChanged("StreetNumber");
				this.OnStreetNumberChanged();
			}
		}
	}
	
	[Column(Storage="_StreetName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string StreetName
	{
		get
		{
			return this._StreetName;
		}
		set
		{
			if ((this._StreetName != value))
			{
				this.OnStreetNameChanging(value);
				this.SendPropertyChanging();
				this._StreetName = value;
				this.SendPropertyChanged("StreetName");
				this.OnStreetNameChanged();
			}
		}
	}
	
	[Column(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_StateID", DbType="Int NOT NULL")]
	public int StateID
	{
		get
		{
			return this._StateID;
		}
		set
		{
			if ((this._StateID != value))
			{
				if (this._State.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStateIDChanging(value);
				this.SendPropertyChanging();
				this._StateID = value;
				this.SendPropertyChanged("StateID");
				this.OnStateIDChanged();
			}
		}
	}
	
	[Column(Storage="_ZipCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string ZipCode
	{
		get
		{
			return this._ZipCode;
		}
		set
		{
			if ((this._ZipCode != value))
			{
				this.OnZipCodeChanging(value);
				this.SendPropertyChanging();
				this._ZipCode = value;
				this.SendPropertyChanged("ZipCode");
				this.OnZipCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Directions", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
	public string Directions
	{
		get
		{
			return this._Directions;
		}
		set
		{
			if ((this._Directions != value))
			{
				this.OnDirectionsChanging(value);
				this.SendPropertyChanging();
				this._Directions = value;
				this.SendPropertyChanged("Directions");
				this.OnDirectionsChanged();
			}
		}
	}
	
	[Column(Storage="_TotalRooms", DbType="Int NOT NULL")]
	public int TotalRooms
	{
		get
		{
			return this._TotalRooms;
		}
		set
		{
			if ((this._TotalRooms != value))
			{
				this.OnTotalRoomsChanging(value);
				this.SendPropertyChanging();
				this._TotalRooms = value;
				this.SendPropertyChanged("TotalRooms");
				this.OnTotalRoomsChanged();
			}
		}
	}
	
	[Column(Storage="_Bedrooms", DbType="Int NOT NULL")]
	public int Bedrooms
	{
		get
		{
			return this._Bedrooms;
		}
		set
		{
			if ((this._Bedrooms != value))
			{
				this.OnBedroomsChanging(value);
				this.SendPropertyChanging();
				this._Bedrooms = value;
				this.SendPropertyChanged("Bedrooms");
				this.OnBedroomsChanged();
			}
		}
	}
	
	[Column(Storage="_Bathrooms", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string Bathrooms
	{
		get
		{
			return this._Bathrooms;
		}
		set
		{
			if ((this._Bathrooms != value))
			{
				this.OnBathroomsChanging(value);
				this.SendPropertyChanging();
				this._Bathrooms = value;
				this.SendPropertyChanged("Bathrooms");
				this.OnBathroomsChanged();
			}
		}
	}
	
	[Column(Storage="_SearchableFields", DbType="VarChar(4000) NOT NULL", CanBeNull=false)]
	public string SearchableFields
	{
		get
		{
			return this._SearchableFields;
		}
		set
		{
			if ((this._SearchableFields != value))
			{
				this.OnSearchableFieldsChanging(value);
				this.SendPropertyChanging();
				this._SearchableFields = value;
				this.SendPropertyChanged("SearchableFields");
				this.OnSearchableFieldsChanged();
			}
		}
	}
	
	[Column(Storage="_Entry", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Entry
	{
		get
		{
			return this._Entry;
		}
		set
		{
			if ((this._Entry != value))
			{
				this.OnEntryChanging(value);
				this.SendPropertyChanging();
				this._Entry = value;
				this.SendPropertyChanged("Entry");
				this.OnEntryChanged();
			}
		}
	}
	
	[Column(Storage="_EntryDate", DbType="DateTime NOT NULL")]
	public System.DateTime EntryDate
	{
		get
		{
			return this._EntryDate;
		}
		set
		{
			if ((this._EntryDate != value))
			{
				this.OnEntryDateChanging(value);
				this.SendPropertyChanging();
				this._EntryDate = value;
				this.SendPropertyChanged("EntryDate");
				this.OnEntryDateChanged();
			}
		}
	}
	
	[Column(Storage="_Completed", DbType="Bit NOT NULL")]
	public bool Completed
	{
		get
		{
			return this._Completed;
		}
		set
		{
			if ((this._Completed != value))
			{
				this.OnCompletedChanging(value);
				this.SendPropertyChanging();
				this._Completed = value;
				this.SendPropertyChanged("Completed");
				this.OnCompletedChanged();
			}
		}
	}
	
	[Column(Storage="_Paid", DbType="Bit NOT NULL")]
	public bool Paid
	{
		get
		{
			return this._Paid;
		}
		set
		{
			if ((this._Paid != value))
			{
				this.OnPaidChanging(value);
				this.SendPropertyChanging();
				this._Paid = value;
				this.SendPropertyChanged("Paid");
				this.OnPaidChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="Bit NOT NULL")]
	public bool Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_Expires", DbType="DateTime")]
	public System.Nullable<System.DateTime> Expires
	{
		get
		{
			return this._Expires;
		}
		set
		{
			if ((this._Expires != value))
			{
				this.OnExpiresChanging(value);
				this.SendPropertyChanging();
				this._Expires = value;
				this.SendPropertyChanged("Expires");
				this.OnExpiresChanged();
			}
		}
	}
	
	[Column(Storage="_EventStart", DbType="DateTime")]
	public System.Nullable<System.DateTime> EventStart
	{
		get
		{
			return this._EventStart;
		}
		set
		{
			if ((this._EventStart != value))
			{
				this.OnEventStartChanging(value);
				this.SendPropertyChanging();
				this._EventStart = value;
				this.SendPropertyChanged("EventStart");
				this.OnEventStartChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_FormDocument", Storage="_FormDocuments", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<FormDocument> FormDocuments
	{
		get
		{
			return this._FormDocuments;
		}
		set
		{
			this._FormDocuments.Assign(value);
		}
	}
	
	[Association(Name="FormEntry_FormEntryCache", Storage="_FormEntryCaches", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<FormEntryCache> FormEntryCaches
	{
		get
		{
			return this._FormEntryCaches;
		}
		set
		{
			this._FormEntryCaches.Assign(value);
		}
	}
	
	[Association(Name="FormEntry_FormFieldData", Storage="_FormFieldDatas", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<FormFieldData> FormFieldDatas
	{
		get
		{
			return this._FormFieldDatas;
		}
		set
		{
			this._FormFieldDatas.Assign(value);
		}
	}
	
	[Association(Name="FormEntry_FormImage", Storage="_FormImages", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<FormImage> FormImages
	{
		get
		{
			return this._FormImages;
		}
		set
		{
			this._FormImages.Assign(value);
		}
	}
	
	[Association(Name="FormEntry_FormView", Storage="_FormViews", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<FormView> FormViews
	{
		get
		{
			return this._FormViews;
		}
		set
		{
			this._FormViews.Assign(value);
		}
	}
	
	[Association(Name="FormEntry_OpenHouseDate", Storage="_OpenHouseDates", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<OpenHouseDate> OpenHouseDates
	{
		get
		{
			return this._OpenHouseDates;
		}
		set
		{
			this._OpenHouseDates.Assign(value);
		}
	}
	
	[Association(Name="FormEntry_SavedFormEntry", Storage="_SavedFormEntries", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<SavedFormEntry> SavedFormEntries
	{
		get
		{
			return this._SavedFormEntries;
		}
		set
		{
			this._SavedFormEntries.Assign(value);
		}
	}
	
	[Association(Name="FormEntry_SavedSearchFormEntryHistory", Storage="_SavedSearchFormEntryHistories", ThisKey="FormEntryID", OtherKey="FormEntryID")]
	public EntitySet<SavedSearchFormEntryHistory> SavedSearchFormEntryHistories
	{
		get
		{
			return this._SavedSearchFormEntryHistories;
		}
		set
		{
			this._SavedSearchFormEntryHistories.Assign(value);
		}
	}
	
	[Association(Name="Form_FormEntry", Storage="_Form", ThisKey="FormID", OtherKey="FormID", IsForeignKey=true)]
	public Form Form
	{
		get
		{
			return this._Form.Entity;
		}
		set
		{
			Form previousValue = this._Form.Entity;
			if (((previousValue != value) 
						|| (this._Form.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Form.Entity = null;
					previousValue.FormEntries.Remove(this);
				}
				this._Form.Entity = value;
				if ((value != null))
				{
					value.FormEntries.Add(this);
					this._FormID = value.FormID;
				}
				else
				{
					this._FormID = default(int);
				}
				this.SendPropertyChanged("Form");
			}
		}
	}
	
	[Association(Name="ListingType_FormEntry", Storage="_ListingType", ThisKey="ListingTypeID", OtherKey="ListingTypeID", IsForeignKey=true)]
	public ListingType ListingType
	{
		get
		{
			return this._ListingType.Entity;
		}
		set
		{
			ListingType previousValue = this._ListingType.Entity;
			if (((previousValue != value) 
						|| (this._ListingType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ListingType.Entity = null;
					previousValue.FormEntries.Remove(this);
				}
				this._ListingType.Entity = value;
				if ((value != null))
				{
					value.FormEntries.Add(this);
					this._ListingTypeID = value.ListingTypeID;
				}
				else
				{
					this._ListingTypeID = default(int);
				}
				this.SendPropertyChanged("ListingType");
			}
		}
	}
	
	[Association(Name="State_FormEntry", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
	public State State
	{
		get
		{
			return this._State.Entity;
		}
		set
		{
			State previousValue = this._State.Entity;
			if (((previousValue != value) 
						|| (this._State.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._State.Entity = null;
					previousValue.FormEntries.Remove(this);
				}
				this._State.Entity = value;
				if ((value != null))
				{
					value.FormEntries.Add(this);
					this._StateID = value.StateID;
				}
				else
				{
					this._StateID = default(int);
				}
				this.SendPropertyChanged("State");
			}
		}
	}
	
	[Association(Name="UserInfo_FormEntry", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.FormEntries.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.FormEntries.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FormDocuments(FormDocument entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_FormDocuments(FormDocument entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
	
	private void attach_FormEntryCaches(FormEntryCache entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_FormEntryCaches(FormEntryCache entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
	
	private void attach_FormFieldDatas(FormFieldData entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_FormFieldDatas(FormFieldData entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
	
	private void attach_FormImages(FormImage entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_FormImages(FormImage entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
	
	private void attach_FormViews(FormView entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_FormViews(FormView entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
	
	private void attach_OpenHouseDates(OpenHouseDate entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_OpenHouseDates(OpenHouseDate entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
	
	private void attach_SavedFormEntries(SavedFormEntry entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_SavedFormEntries(SavedFormEntry entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
	
	private void attach_SavedSearchFormEntryHistories(SavedSearchFormEntryHistory entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = this;
	}
	
	private void detach_SavedSearchFormEntryHistories(SavedSearchFormEntryHistory entity)
	{
		this.SendPropertyChanging();
		entity.FormEntry = null;
	}
}

[Table(Name="dbo.FormEntryArchive")]
public partial class FormEntryArchive : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormEntryArchiveID;
	
	private string _AZHID;
	
	private string _FormType;
	
	private int _UserInfoID;
	
	private string _ListingType;
	
	private int _Price;
	
	private string _StreetNumber;
	
	private string _StreetName;
	
	private string _City;
	
	private string _State;
	
	private string _ZipCode;
	
	private string _Description;
	
	private string _Directions;
	
	private int _Bedrooms;
	
	private string _Bathrooms;
	
	private string _SearchableFields;
	
	private string _Entry;
	
	private System.DateTime _EntryDate;
	
	private bool _Completed;
	
	private bool _Paid;
	
	private bool _Active;
	
	private System.DateTime _Expires;
	
	private System.DateTime _EventStart;
	
	private int _TotalViews;
	
	private string _ReasonedRemoved;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormEntryArchiveIDChanging(int value);
    partial void OnFormEntryArchiveIDChanged();
    partial void OnAZHIDChanging(string value);
    partial void OnAZHIDChanged();
    partial void OnFormTypeChanging(string value);
    partial void OnFormTypeChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnListingTypeChanging(string value);
    partial void OnListingTypeChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnStreetNumberChanging(string value);
    partial void OnStreetNumberChanged();
    partial void OnStreetNameChanging(string value);
    partial void OnStreetNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDirectionsChanging(string value);
    partial void OnDirectionsChanged();
    partial void OnBedroomsChanging(int value);
    partial void OnBedroomsChanged();
    partial void OnBathroomsChanging(string value);
    partial void OnBathroomsChanged();
    partial void OnSearchableFieldsChanging(string value);
    partial void OnSearchableFieldsChanged();
    partial void OnEntryChanging(string value);
    partial void OnEntryChanged();
    partial void OnEntryDateChanging(System.DateTime value);
    partial void OnEntryDateChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnPaidChanging(bool value);
    partial void OnPaidChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnExpiresChanging(System.DateTime value);
    partial void OnExpiresChanged();
    partial void OnEventStartChanging(System.DateTime value);
    partial void OnEventStartChanged();
    partial void OnTotalViewsChanging(int value);
    partial void OnTotalViewsChanged();
    partial void OnReasonedRemovedChanging(string value);
    partial void OnReasonedRemovedChanged();
    #endregion
	
	public FormEntryArchive()
	{
		OnCreated();
	}
	
	[Column(Storage="_FormEntryArchiveID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormEntryArchiveID
	{
		get
		{
			return this._FormEntryArchiveID;
		}
		set
		{
			if ((this._FormEntryArchiveID != value))
			{
				this.OnFormEntryArchiveIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryArchiveID = value;
				this.SendPropertyChanged("FormEntryArchiveID");
				this.OnFormEntryArchiveIDChanged();
			}
		}
	}
	
	[Column(Storage="_AZHID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string AZHID
	{
		get
		{
			return this._AZHID;
		}
		set
		{
			if ((this._AZHID != value))
			{
				this.OnAZHIDChanging(value);
				this.SendPropertyChanging();
				this._AZHID = value;
				this.SendPropertyChanged("AZHID");
				this.OnAZHIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string FormType
	{
		get
		{
			return this._FormType;
		}
		set
		{
			if ((this._FormType != value))
			{
				this.OnFormTypeChanging(value);
				this.SendPropertyChanging();
				this._FormType = value;
				this.SendPropertyChanged("FormType");
				this.OnFormTypeChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_ListingType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string ListingType
	{
		get
		{
			return this._ListingType;
		}
		set
		{
			if ((this._ListingType != value))
			{
				this.OnListingTypeChanging(value);
				this.SendPropertyChanging();
				this._ListingType = value;
				this.SendPropertyChanged("ListingType");
				this.OnListingTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Price", DbType="Int NOT NULL")]
	public int Price
	{
		get
		{
			return this._Price;
		}
		set
		{
			if ((this._Price != value))
			{
				this.OnPriceChanging(value);
				this.SendPropertyChanging();
				this._Price = value;
				this.SendPropertyChanged("Price");
				this.OnPriceChanged();
			}
		}
	}
	
	[Column(Storage="_StreetNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string StreetNumber
	{
		get
		{
			return this._StreetNumber;
		}
		set
		{
			if ((this._StreetNumber != value))
			{
				this.OnStreetNumberChanging(value);
				this.SendPropertyChanging();
				this._StreetNumber = value;
				this.SendPropertyChanged("StreetNumber");
				this.OnStreetNumberChanged();
			}
		}
	}
	
	[Column(Storage="_StreetName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string StreetName
	{
		get
		{
			return this._StreetName;
		}
		set
		{
			if ((this._StreetName != value))
			{
				this.OnStreetNameChanging(value);
				this.SendPropertyChanging();
				this._StreetName = value;
				this.SendPropertyChanged("StreetName");
				this.OnStreetNameChanged();
			}
		}
	}
	
	[Column(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_State", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[Column(Storage="_ZipCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string ZipCode
	{
		get
		{
			return this._ZipCode;
		}
		set
		{
			if ((this._ZipCode != value))
			{
				this.OnZipCodeChanging(value);
				this.SendPropertyChanging();
				this._ZipCode = value;
				this.SendPropertyChanged("ZipCode");
				this.OnZipCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Directions", DbType="VarChar(5000) NOT NULL", CanBeNull=false)]
	public string Directions
	{
		get
		{
			return this._Directions;
		}
		set
		{
			if ((this._Directions != value))
			{
				this.OnDirectionsChanging(value);
				this.SendPropertyChanging();
				this._Directions = value;
				this.SendPropertyChanged("Directions");
				this.OnDirectionsChanged();
			}
		}
	}
	
	[Column(Storage="_Bedrooms", DbType="Int NOT NULL")]
	public int Bedrooms
	{
		get
		{
			return this._Bedrooms;
		}
		set
		{
			if ((this._Bedrooms != value))
			{
				this.OnBedroomsChanging(value);
				this.SendPropertyChanging();
				this._Bedrooms = value;
				this.SendPropertyChanged("Bedrooms");
				this.OnBedroomsChanged();
			}
		}
	}
	
	[Column(Storage="_Bathrooms", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string Bathrooms
	{
		get
		{
			return this._Bathrooms;
		}
		set
		{
			if ((this._Bathrooms != value))
			{
				this.OnBathroomsChanging(value);
				this.SendPropertyChanging();
				this._Bathrooms = value;
				this.SendPropertyChanged("Bathrooms");
				this.OnBathroomsChanged();
			}
		}
	}
	
	[Column(Storage="_SearchableFields", DbType="VarChar(4000) NOT NULL", CanBeNull=false)]
	public string SearchableFields
	{
		get
		{
			return this._SearchableFields;
		}
		set
		{
			if ((this._SearchableFields != value))
			{
				this.OnSearchableFieldsChanging(value);
				this.SendPropertyChanging();
				this._SearchableFields = value;
				this.SendPropertyChanged("SearchableFields");
				this.OnSearchableFieldsChanged();
			}
		}
	}
	
	[Column(Storage="_Entry", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Entry
	{
		get
		{
			return this._Entry;
		}
		set
		{
			if ((this._Entry != value))
			{
				this.OnEntryChanging(value);
				this.SendPropertyChanging();
				this._Entry = value;
				this.SendPropertyChanged("Entry");
				this.OnEntryChanged();
			}
		}
	}
	
	[Column(Storage="_EntryDate", DbType="DateTime NOT NULL")]
	public System.DateTime EntryDate
	{
		get
		{
			return this._EntryDate;
		}
		set
		{
			if ((this._EntryDate != value))
			{
				this.OnEntryDateChanging(value);
				this.SendPropertyChanging();
				this._EntryDate = value;
				this.SendPropertyChanged("EntryDate");
				this.OnEntryDateChanged();
			}
		}
	}
	
	[Column(Storage="_Completed", DbType="Bit NOT NULL")]
	public bool Completed
	{
		get
		{
			return this._Completed;
		}
		set
		{
			if ((this._Completed != value))
			{
				this.OnCompletedChanging(value);
				this.SendPropertyChanging();
				this._Completed = value;
				this.SendPropertyChanged("Completed");
				this.OnCompletedChanged();
			}
		}
	}
	
	[Column(Storage="_Paid", DbType="Bit NOT NULL")]
	public bool Paid
	{
		get
		{
			return this._Paid;
		}
		set
		{
			if ((this._Paid != value))
			{
				this.OnPaidChanging(value);
				this.SendPropertyChanging();
				this._Paid = value;
				this.SendPropertyChanged("Paid");
				this.OnPaidChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="Bit NOT NULL")]
	public bool Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_Expires", DbType="DateTime NOT NULL")]
	public System.DateTime Expires
	{
		get
		{
			return this._Expires;
		}
		set
		{
			if ((this._Expires != value))
			{
				this.OnExpiresChanging(value);
				this.SendPropertyChanging();
				this._Expires = value;
				this.SendPropertyChanged("Expires");
				this.OnExpiresChanged();
			}
		}
	}
	
	[Column(Storage="_EventStart", DbType="DateTime NOT NULL")]
	public System.DateTime EventStart
	{
		get
		{
			return this._EventStart;
		}
		set
		{
			if ((this._EventStart != value))
			{
				this.OnEventStartChanging(value);
				this.SendPropertyChanging();
				this._EventStart = value;
				this.SendPropertyChanged("EventStart");
				this.OnEventStartChanged();
			}
		}
	}
	
	[Column(Storage="_TotalViews", DbType="Int NOT NULL")]
	public int TotalViews
	{
		get
		{
			return this._TotalViews;
		}
		set
		{
			if ((this._TotalViews != value))
			{
				this.OnTotalViewsChanging(value);
				this.SendPropertyChanging();
				this._TotalViews = value;
				this.SendPropertyChanged("TotalViews");
				this.OnTotalViewsChanged();
			}
		}
	}
	
	[Column(Storage="_ReasonedRemoved", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string ReasonedRemoved
	{
		get
		{
			return this._ReasonedRemoved;
		}
		set
		{
			if ((this._ReasonedRemoved != value))
			{
				this.OnReasonedRemovedChanging(value);
				this.SendPropertyChanging();
				this._ReasonedRemoved = value;
				this.SendPropertyChanged("ReasonedRemoved");
				this.OnReasonedRemovedChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FormEntryCache")]
public partial class FormEntryCache : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormEntryCacheID;
	
	private int _FormEntryID;
	
	private string _CachedBody;
	
	private string _CachedHeader;
	
	private EntityRef<FormEntry> _FormEntry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormEntryCacheIDChanging(int value);
    partial void OnFormEntryCacheIDChanged();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnCachedBodyChanging(string value);
    partial void OnCachedBodyChanged();
    partial void OnCachedHeaderChanging(string value);
    partial void OnCachedHeaderChanged();
    #endregion
	
	public FormEntryCache()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		OnCreated();
	}
	
	[Column(Storage="_FormEntryCacheID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormEntryCacheID
	{
		get
		{
			return this._FormEntryCacheID;
		}
		set
		{
			if ((this._FormEntryCacheID != value))
			{
				this.OnFormEntryCacheIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryCacheID = value;
				this.SendPropertyChanged("FormEntryCacheID");
				this.OnFormEntryCacheIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int NOT NULL")]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_CachedBody", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string CachedBody
	{
		get
		{
			return this._CachedBody;
		}
		set
		{
			if ((this._CachedBody != value))
			{
				this.OnCachedBodyChanging(value);
				this.SendPropertyChanging();
				this._CachedBody = value;
				this.SendPropertyChanged("CachedBody");
				this.OnCachedBodyChanged();
			}
		}
	}
	
	[Column(Storage="_CachedHeader", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string CachedHeader
	{
		get
		{
			return this._CachedHeader;
		}
		set
		{
			if ((this._CachedHeader != value))
			{
				this.OnCachedHeaderChanging(value);
				this.SendPropertyChanging();
				this._CachedHeader = value;
				this.SendPropertyChanged("CachedHeader");
				this.OnCachedHeaderChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_FormEntryCache", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.FormEntryCaches.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.FormEntryCaches.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(int);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FormField")]
public partial class FormField : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormFieldID;
	
	private int _FieldTypeID;
	
	private int _FormSectionID;
	
	private string _Name;
	
	private string _DefaultValue;
	
	private string _AllowedValues;
	
	private int _SortOrder;
	
	private bool _Required;
	
	private string _ToolTip;
	
	private string _Regex;
	
	private string _Suffix;
	
	private bool _Searchable;
	
	private EntitySet<FormFieldData> _FormFieldDatas;
	
	private EntityRef<FieldType> _FieldType;
	
	private EntityRef<FormSection> _FormSection;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormFieldIDChanging(int value);
    partial void OnFormFieldIDChanged();
    partial void OnFieldTypeIDChanging(int value);
    partial void OnFieldTypeIDChanged();
    partial void OnFormSectionIDChanging(int value);
    partial void OnFormSectionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnAllowedValuesChanging(string value);
    partial void OnAllowedValuesChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnRequiredChanging(bool value);
    partial void OnRequiredChanged();
    partial void OnToolTipChanging(string value);
    partial void OnToolTipChanged();
    partial void OnRegexChanging(string value);
    partial void OnRegexChanged();
    partial void OnSuffixChanging(string value);
    partial void OnSuffixChanged();
    partial void OnSearchableChanging(bool value);
    partial void OnSearchableChanged();
    #endregion
	
	public FormField()
	{
		this._FormFieldDatas = new EntitySet<FormFieldData>(new Action<FormFieldData>(this.attach_FormFieldDatas), new Action<FormFieldData>(this.detach_FormFieldDatas));
		this._FieldType = default(EntityRef<FieldType>);
		this._FormSection = default(EntityRef<FormSection>);
		OnCreated();
	}
	
	[Column(Storage="_FormFieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormFieldID
	{
		get
		{
			return this._FormFieldID;
		}
		set
		{
			if ((this._FormFieldID != value))
			{
				this.OnFormFieldIDChanging(value);
				this.SendPropertyChanging();
				this._FormFieldID = value;
				this.SendPropertyChanged("FormFieldID");
				this.OnFormFieldIDChanged();
			}
		}
	}
	
	[Column(Storage="_FieldTypeID", DbType="Int NOT NULL")]
	public int FieldTypeID
	{
		get
		{
			return this._FieldTypeID;
		}
		set
		{
			if ((this._FieldTypeID != value))
			{
				if (this._FieldType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFieldTypeIDChanging(value);
				this.SendPropertyChanging();
				this._FieldTypeID = value;
				this.SendPropertyChanged("FieldTypeID");
				this.OnFieldTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormSectionID", DbType="Int NOT NULL")]
	public int FormSectionID
	{
		get
		{
			return this._FormSectionID;
		}
		set
		{
			if ((this._FormSectionID != value))
			{
				if (this._FormSection.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormSectionIDChanging(value);
				this.SendPropertyChanging();
				this._FormSectionID = value;
				this.SendPropertyChanged("FormSectionID");
				this.OnFormSectionIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_DefaultValue", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string DefaultValue
	{
		get
		{
			return this._DefaultValue;
		}
		set
		{
			if ((this._DefaultValue != value))
			{
				this.OnDefaultValueChanging(value);
				this.SendPropertyChanging();
				this._DefaultValue = value;
				this.SendPropertyChanged("DefaultValue");
				this.OnDefaultValueChanged();
			}
		}
	}
	
	[Column(Storage="_AllowedValues", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string AllowedValues
	{
		get
		{
			return this._AllowedValues;
		}
		set
		{
			if ((this._AllowedValues != value))
			{
				this.OnAllowedValuesChanging(value);
				this.SendPropertyChanging();
				this._AllowedValues = value;
				this.SendPropertyChanged("AllowedValues");
				this.OnAllowedValuesChanged();
			}
		}
	}
	
	[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
	public int SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[Column(Storage="_Required", DbType="Bit NOT NULL")]
	public bool Required
	{
		get
		{
			return this._Required;
		}
		set
		{
			if ((this._Required != value))
			{
				this.OnRequiredChanging(value);
				this.SendPropertyChanging();
				this._Required = value;
				this.SendPropertyChanged("Required");
				this.OnRequiredChanged();
			}
		}
	}
	
	[Column(Storage="_ToolTip", DbType="VarChar(200)")]
	public string ToolTip
	{
		get
		{
			return this._ToolTip;
		}
		set
		{
			if ((this._ToolTip != value))
			{
				this.OnToolTipChanging(value);
				this.SendPropertyChanging();
				this._ToolTip = value;
				this.SendPropertyChanged("ToolTip");
				this.OnToolTipChanged();
			}
		}
	}
	
	[Column(Storage="_Regex", DbType="VarChar(1000)")]
	public string Regex
	{
		get
		{
			return this._Regex;
		}
		set
		{
			if ((this._Regex != value))
			{
				this.OnRegexChanging(value);
				this.SendPropertyChanging();
				this._Regex = value;
				this.SendPropertyChanged("Regex");
				this.OnRegexChanged();
			}
		}
	}
	
	[Column(Storage="_Suffix", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Suffix
	{
		get
		{
			return this._Suffix;
		}
		set
		{
			if ((this._Suffix != value))
			{
				this.OnSuffixChanging(value);
				this.SendPropertyChanging();
				this._Suffix = value;
				this.SendPropertyChanged("Suffix");
				this.OnSuffixChanged();
			}
		}
	}
	
	[Column(Storage="_Searchable", DbType="Bit NOT NULL")]
	public bool Searchable
	{
		get
		{
			return this._Searchable;
		}
		set
		{
			if ((this._Searchable != value))
			{
				this.OnSearchableChanging(value);
				this.SendPropertyChanging();
				this._Searchable = value;
				this.SendPropertyChanged("Searchable");
				this.OnSearchableChanged();
			}
		}
	}
	
	[Association(Name="FormField_FormFieldData", Storage="_FormFieldDatas", ThisKey="FormFieldID", OtherKey="FormFieldID")]
	public EntitySet<FormFieldData> FormFieldDatas
	{
		get
		{
			return this._FormFieldDatas;
		}
		set
		{
			this._FormFieldDatas.Assign(value);
		}
	}
	
	[Association(Name="FieldType_FormField", Storage="_FieldType", ThisKey="FieldTypeID", OtherKey="FieldTypeID", IsForeignKey=true)]
	public FieldType FieldType
	{
		get
		{
			return this._FieldType.Entity;
		}
		set
		{
			FieldType previousValue = this._FieldType.Entity;
			if (((previousValue != value) 
						|| (this._FieldType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FieldType.Entity = null;
					previousValue.FormFields.Remove(this);
				}
				this._FieldType.Entity = value;
				if ((value != null))
				{
					value.FormFields.Add(this);
					this._FieldTypeID = value.FieldTypeID;
				}
				else
				{
					this._FieldTypeID = default(int);
				}
				this.SendPropertyChanged("FieldType");
			}
		}
	}
	
	[Association(Name="FormSection_FormField", Storage="_FormSection", ThisKey="FormSectionID", OtherKey="FormSectionID", IsForeignKey=true)]
	public FormSection FormSection
	{
		get
		{
			return this._FormSection.Entity;
		}
		set
		{
			FormSection previousValue = this._FormSection.Entity;
			if (((previousValue != value) 
						|| (this._FormSection.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormSection.Entity = null;
					previousValue.FormFields.Remove(this);
				}
				this._FormSection.Entity = value;
				if ((value != null))
				{
					value.FormFields.Add(this);
					this._FormSectionID = value.FormSectionID;
				}
				else
				{
					this._FormSectionID = default(int);
				}
				this.SendPropertyChanged("FormSection");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FormFieldDatas(FormFieldData entity)
	{
		this.SendPropertyChanging();
		entity.FormField = this;
	}
	
	private void detach_FormFieldDatas(FormFieldData entity)
	{
		this.SendPropertyChanging();
		entity.FormField = null;
	}
}

[Table(Name="dbo.FormFieldData")]
public partial class FormFieldData : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormFieldDataID;
	
	private int _FormFieldID;
	
	private int _FormEntryID;
	
	private string _Value;
	
	private EntityRef<FormEntry> _FormEntry;
	
	private EntityRef<FormField> _FormField;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormFieldDataIDChanging(int value);
    partial void OnFormFieldDataIDChanged();
    partial void OnFormFieldIDChanging(int value);
    partial void OnFormFieldIDChanged();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
	
	public FormFieldData()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		this._FormField = default(EntityRef<FormField>);
		OnCreated();
	}
	
	[Column(Storage="_FormFieldDataID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormFieldDataID
	{
		get
		{
			return this._FormFieldDataID;
		}
		set
		{
			if ((this._FormFieldDataID != value))
			{
				this.OnFormFieldDataIDChanging(value);
				this.SendPropertyChanging();
				this._FormFieldDataID = value;
				this.SendPropertyChanged("FormFieldDataID");
				this.OnFormFieldDataIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormFieldID", DbType="Int NOT NULL")]
	public int FormFieldID
	{
		get
		{
			return this._FormFieldID;
		}
		set
		{
			if ((this._FormFieldID != value))
			{
				if (this._FormField.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormFieldIDChanging(value);
				this.SendPropertyChanging();
				this._FormFieldID = value;
				this.SendPropertyChanged("FormFieldID");
				this.OnFormFieldIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int NOT NULL")]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Value", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Value
	{
		get
		{
			return this._Value;
		}
		set
		{
			if ((this._Value != value))
			{
				this.OnValueChanging(value);
				this.SendPropertyChanging();
				this._Value = value;
				this.SendPropertyChanged("Value");
				this.OnValueChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_FormFieldData", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.FormFieldDatas.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.FormFieldDatas.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(int);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	[Association(Name="FormField_FormFieldData", Storage="_FormField", ThisKey="FormFieldID", OtherKey="FormFieldID", IsForeignKey=true)]
	public FormField FormField
	{
		get
		{
			return this._FormField.Entity;
		}
		set
		{
			FormField previousValue = this._FormField.Entity;
			if (((previousValue != value) 
						|| (this._FormField.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormField.Entity = null;
					previousValue.FormFieldDatas.Remove(this);
				}
				this._FormField.Entity = value;
				if ((value != null))
				{
					value.FormFieldDatas.Add(this);
					this._FormFieldID = value.FormFieldID;
				}
				else
				{
					this._FormFieldID = default(int);
				}
				this.SendPropertyChanged("FormField");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FormImage")]
public partial class FormImage : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormImageID;
	
	private int _FormEntryID;
	
	private string _Caption;
	
	private string _Filename;
	
	private int _SortOrder;
	
	private EntityRef<FormEntry> _FormEntry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormImageIDChanging(int value);
    partial void OnFormImageIDChanged();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnCaptionChanging(string value);
    partial void OnCaptionChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
	
	public FormImage()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		OnCreated();
	}
	
	[Column(Storage="_FormImageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormImageID
	{
		get
		{
			return this._FormImageID;
		}
		set
		{
			if ((this._FormImageID != value))
			{
				this.OnFormImageIDChanging(value);
				this.SendPropertyChanging();
				this._FormImageID = value;
				this.SendPropertyChanged("FormImageID");
				this.OnFormImageIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int NOT NULL")]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Caption", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Caption
	{
		get
		{
			return this._Caption;
		}
		set
		{
			if ((this._Caption != value))
			{
				this.OnCaptionChanging(value);
				this.SendPropertyChanging();
				this._Caption = value;
				this.SendPropertyChanged("Caption");
				this.OnCaptionChanged();
			}
		}
	}
	
	[Column(Storage="_Filename", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Filename
	{
		get
		{
			return this._Filename;
		}
		set
		{
			if ((this._Filename != value))
			{
				this.OnFilenameChanging(value);
				this.SendPropertyChanging();
				this._Filename = value;
				this.SendPropertyChanged("Filename");
				this.OnFilenameChanged();
			}
		}
	}
	
	[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
	public int SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_FormImage", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.FormImages.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.FormImages.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(int);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FormListingType")]
public partial class FormListingType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IndexID;
	
	private int _FormID;
	
	private int _ListingTypeID;
	
	private EntityRef<Form> _Form;
	
	private EntityRef<ListingType> _ListingType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexIDChanging(int value);
    partial void OnIndexIDChanged();
    partial void OnFormIDChanging(int value);
    partial void OnFormIDChanged();
    partial void OnListingTypeIDChanging(int value);
    partial void OnListingTypeIDChanged();
    #endregion
	
	public FormListingType()
	{
		this._Form = default(EntityRef<Form>);
		this._ListingType = default(EntityRef<ListingType>);
		OnCreated();
	}
	
	[Column(Storage="_IndexID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IndexID
	{
		get
		{
			return this._IndexID;
		}
		set
		{
			if ((this._IndexID != value))
			{
				this.OnIndexIDChanging(value);
				this.SendPropertyChanging();
				this._IndexID = value;
				this.SendPropertyChanged("IndexID");
				this.OnIndexIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormID", DbType="Int NOT NULL")]
	public int FormID
	{
		get
		{
			return this._FormID;
		}
		set
		{
			if ((this._FormID != value))
			{
				if (this._Form.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormIDChanging(value);
				this.SendPropertyChanging();
				this._FormID = value;
				this.SendPropertyChanged("FormID");
				this.OnFormIDChanged();
			}
		}
	}
	
	[Column(Storage="_ListingTypeID", DbType="Int NOT NULL")]
	public int ListingTypeID
	{
		get
		{
			return this._ListingTypeID;
		}
		set
		{
			if ((this._ListingTypeID != value))
			{
				if (this._ListingType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnListingTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ListingTypeID = value;
				this.SendPropertyChanged("ListingTypeID");
				this.OnListingTypeIDChanged();
			}
		}
	}
	
	[Association(Name="Form_FormListingType", Storage="_Form", ThisKey="FormID", OtherKey="FormID", IsForeignKey=true)]
	public Form Form
	{
		get
		{
			return this._Form.Entity;
		}
		set
		{
			Form previousValue = this._Form.Entity;
			if (((previousValue != value) 
						|| (this._Form.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Form.Entity = null;
					previousValue.FormListingTypes.Remove(this);
				}
				this._Form.Entity = value;
				if ((value != null))
				{
					value.FormListingTypes.Add(this);
					this._FormID = value.FormID;
				}
				else
				{
					this._FormID = default(int);
				}
				this.SendPropertyChanged("Form");
			}
		}
	}
	
	[Association(Name="ListingType_FormListingType", Storage="_ListingType", ThisKey="ListingTypeID", OtherKey="ListingTypeID", IsForeignKey=true)]
	public ListingType ListingType
	{
		get
		{
			return this._ListingType.Entity;
		}
		set
		{
			ListingType previousValue = this._ListingType.Entity;
			if (((previousValue != value) 
						|| (this._ListingType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ListingType.Entity = null;
					previousValue.FormListingTypes.Remove(this);
				}
				this._ListingType.Entity = value;
				if ((value != null))
				{
					value.FormListingTypes.Add(this);
					this._ListingTypeID = value.ListingTypeID;
				}
				else
				{
					this._ListingTypeID = default(int);
				}
				this.SendPropertyChanged("ListingType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.FormSection")]
public partial class FormSection : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FormSectionID;
	
	private int _FormID;
	
	private string _SectionName;
	
	private string _Description;
	
	private bool _Active;
	
	private bool _FirstPage;
	
	private int _SortOrder;
	
	private EntitySet<FormField> _FormFields;
	
	private EntityRef<Form> _Form;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormSectionIDChanging(int value);
    partial void OnFormSectionIDChanged();
    partial void OnFormIDChanging(int value);
    partial void OnFormIDChanged();
    partial void OnSectionNameChanging(string value);
    partial void OnSectionNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnFirstPageChanging(bool value);
    partial void OnFirstPageChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
	
	public FormSection()
	{
		this._FormFields = new EntitySet<FormField>(new Action<FormField>(this.attach_FormFields), new Action<FormField>(this.detach_FormFields));
		this._Form = default(EntityRef<Form>);
		OnCreated();
	}
	
	[Column(Storage="_FormSectionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FormSectionID
	{
		get
		{
			return this._FormSectionID;
		}
		set
		{
			if ((this._FormSectionID != value))
			{
				this.OnFormSectionIDChanging(value);
				this.SendPropertyChanging();
				this._FormSectionID = value;
				this.SendPropertyChanged("FormSectionID");
				this.OnFormSectionIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormID", DbType="Int NOT NULL")]
	public int FormID
	{
		get
		{
			return this._FormID;
		}
		set
		{
			if ((this._FormID != value))
			{
				if (this._Form.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormIDChanging(value);
				this.SendPropertyChanging();
				this._FormID = value;
				this.SendPropertyChanged("FormID");
				this.OnFormIDChanged();
			}
		}
	}
	
	[Column(Storage="_SectionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string SectionName
	{
		get
		{
			return this._SectionName;
		}
		set
		{
			if ((this._SectionName != value))
			{
				this.OnSectionNameChanging(value);
				this.SendPropertyChanging();
				this._SectionName = value;
				this.SendPropertyChanged("SectionName");
				this.OnSectionNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="Bit NOT NULL")]
	public bool Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_FirstPage", DbType="Bit NOT NULL")]
	public bool FirstPage
	{
		get
		{
			return this._FirstPage;
		}
		set
		{
			if ((this._FirstPage != value))
			{
				this.OnFirstPageChanging(value);
				this.SendPropertyChanging();
				this._FirstPage = value;
				this.SendPropertyChanged("FirstPage");
				this.OnFirstPageChanged();
			}
		}
	}
	
	[Column(Storage="_SortOrder", DbType="Int NOT NULL")]
	public int SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[Association(Name="FormSection_FormField", Storage="_FormFields", ThisKey="FormSectionID", OtherKey="FormSectionID")]
	public EntitySet<FormField> FormFields
	{
		get
		{
			return this._FormFields;
		}
		set
		{
			this._FormFields.Assign(value);
		}
	}
	
	[Association(Name="Form_FormSection", Storage="_Form", ThisKey="FormID", OtherKey="FormID", IsForeignKey=true)]
	public Form Form
	{
		get
		{
			return this._Form.Entity;
		}
		set
		{
			Form previousValue = this._Form.Entity;
			if (((previousValue != value) 
						|| (this._Form.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Form.Entity = null;
					previousValue.FormSections.Remove(this);
				}
				this._Form.Entity = value;
				if ((value != null))
				{
					value.FormSections.Add(this);
					this._FormID = value.FormID;
				}
				else
				{
					this._FormID = default(int);
				}
				this.SendPropertyChanged("Form");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FormFields(FormField entity)
	{
		this.SendPropertyChanging();
		entity.FormSection = this;
	}
	
	private void detach_FormFields(FormField entity)
	{
		this.SendPropertyChanging();
		entity.FormSection = null;
	}
}

[Table(Name="dbo.FormViews")]
public partial class FormView : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ViewID;
	
	private int _FormEntryID;
	
	private System.DateTime _ViewDate;
	
	private string _ViewIP;
	
	private EntityRef<FormEntry> _FormEntry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnViewIDChanging(int value);
    partial void OnViewIDChanged();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnViewDateChanging(System.DateTime value);
    partial void OnViewDateChanged();
    partial void OnViewIPChanging(string value);
    partial void OnViewIPChanged();
    #endregion
	
	public FormView()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		OnCreated();
	}
	
	[Column(Storage="_ViewID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ViewID
	{
		get
		{
			return this._ViewID;
		}
		set
		{
			if ((this._ViewID != value))
			{
				this.OnViewIDChanging(value);
				this.SendPropertyChanging();
				this._ViewID = value;
				this.SendPropertyChanged("ViewID");
				this.OnViewIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int NOT NULL")]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_ViewDate", DbType="DateTime NOT NULL")]
	public System.DateTime ViewDate
	{
		get
		{
			return this._ViewDate;
		}
		set
		{
			if ((this._ViewDate != value))
			{
				this.OnViewDateChanging(value);
				this.SendPropertyChanging();
				this._ViewDate = value;
				this.SendPropertyChanged("ViewDate");
				this.OnViewDateChanged();
			}
		}
	}
	
	[Column(Storage="_ViewIP", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string ViewIP
	{
		get
		{
			return this._ViewIP;
		}
		set
		{
			if ((this._ViewIP != value))
			{
				this.OnViewIPChanging(value);
				this.SendPropertyChanging();
				this._ViewIP = value;
				this.SendPropertyChanged("ViewIP");
				this.OnViewIPChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_FormView", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.FormViews.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.FormViews.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(int);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ListingType")]
public partial class ListingType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ListingTypeID;
	
	private string _Name;
	
	private bool _HasPrice;
	
	private bool _MonthlyPrice;
	
	private bool _HasDate;
	
	private EntitySet<FormEntry> _FormEntries;
	
	private EntitySet<FormListingType> _FormListingTypes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnListingTypeIDChanging(int value);
    partial void OnListingTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnHasPriceChanging(bool value);
    partial void OnHasPriceChanged();
    partial void OnMonthlyPriceChanging(bool value);
    partial void OnMonthlyPriceChanged();
    partial void OnHasDateChanging(bool value);
    partial void OnHasDateChanged();
    #endregion
	
	public ListingType()
	{
		this._FormEntries = new EntitySet<FormEntry>(new Action<FormEntry>(this.attach_FormEntries), new Action<FormEntry>(this.detach_FormEntries));
		this._FormListingTypes = new EntitySet<FormListingType>(new Action<FormListingType>(this.attach_FormListingTypes), new Action<FormListingType>(this.detach_FormListingTypes));
		OnCreated();
	}
	
	[Column(Storage="_ListingTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ListingTypeID
	{
		get
		{
			return this._ListingTypeID;
		}
		set
		{
			if ((this._ListingTypeID != value))
			{
				this.OnListingTypeIDChanging(value);
				this.SendPropertyChanging();
				this._ListingTypeID = value;
				this.SendPropertyChanged("ListingTypeID");
				this.OnListingTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_HasPrice", DbType="Bit NOT NULL")]
	public bool HasPrice
	{
		get
		{
			return this._HasPrice;
		}
		set
		{
			if ((this._HasPrice != value))
			{
				this.OnHasPriceChanging(value);
				this.SendPropertyChanging();
				this._HasPrice = value;
				this.SendPropertyChanged("HasPrice");
				this.OnHasPriceChanged();
			}
		}
	}
	
	[Column(Storage="_MonthlyPrice", DbType="Bit NOT NULL")]
	public bool MonthlyPrice
	{
		get
		{
			return this._MonthlyPrice;
		}
		set
		{
			if ((this._MonthlyPrice != value))
			{
				this.OnMonthlyPriceChanging(value);
				this.SendPropertyChanging();
				this._MonthlyPrice = value;
				this.SendPropertyChanged("MonthlyPrice");
				this.OnMonthlyPriceChanged();
			}
		}
	}
	
	[Column(Storage="_HasDate", DbType="Bit NOT NULL")]
	public bool HasDate
	{
		get
		{
			return this._HasDate;
		}
		set
		{
			if ((this._HasDate != value))
			{
				this.OnHasDateChanging(value);
				this.SendPropertyChanging();
				this._HasDate = value;
				this.SendPropertyChanged("HasDate");
				this.OnHasDateChanged();
			}
		}
	}
	
	[Association(Name="ListingType_FormEntry", Storage="_FormEntries", ThisKey="ListingTypeID", OtherKey="ListingTypeID")]
	public EntitySet<FormEntry> FormEntries
	{
		get
		{
			return this._FormEntries;
		}
		set
		{
			this._FormEntries.Assign(value);
		}
	}
	
	[Association(Name="ListingType_FormListingType", Storage="_FormListingTypes", ThisKey="ListingTypeID", OtherKey="ListingTypeID")]
	public EntitySet<FormListingType> FormListingTypes
	{
		get
		{
			return this._FormListingTypes;
		}
		set
		{
			this._FormListingTypes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.ListingType = this;
	}
	
	private void detach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.ListingType = null;
	}
	
	private void attach_FormListingTypes(FormListingType entity)
	{
		this.SendPropertyChanging();
		entity.ListingType = this;
	}
	
	private void detach_FormListingTypes(FormListingType entity)
	{
		this.SendPropertyChanging();
		entity.ListingType = null;
	}
}

[Table(Name="dbo.News")]
public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _NewsID;
	
	private int _UserInfoID;
	
	private string _Title;
	
	private System.DateTime _Created;
	
	private string _Teaser;
	
	private string _Body;
	
	private string _ExternalUrl;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(int value);
    partial void OnNewsIDChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnTeaserChanging(string value);
    partial void OnTeaserChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnExternalUrlChanging(string value);
    partial void OnExternalUrlChanged();
    #endregion
	
	public New()
	{
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_NewsID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int NewsID
	{
		get
		{
			return this._NewsID;
		}
		set
		{
			if ((this._NewsID != value))
			{
				this.OnNewsIDChanging(value);
				this.SendPropertyChanging();
				this._NewsID = value;
				this.SendPropertyChanged("NewsID");
				this.OnNewsIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_Teaser", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Teaser
	{
		get
		{
			return this._Teaser;
		}
		set
		{
			if ((this._Teaser != value))
			{
				this.OnTeaserChanging(value);
				this.SendPropertyChanging();
				this._Teaser = value;
				this.SendPropertyChanged("Teaser");
				this.OnTeaserChanged();
			}
		}
	}
	
	[Column(Storage="_Body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Body
	{
		get
		{
			return this._Body;
		}
		set
		{
			if ((this._Body != value))
			{
				this.OnBodyChanging(value);
				this.SendPropertyChanging();
				this._Body = value;
				this.SendPropertyChanged("Body");
				this.OnBodyChanged();
			}
		}
	}
	
	[Column(Storage="_ExternalUrl", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
	public string ExternalUrl
	{
		get
		{
			return this._ExternalUrl;
		}
		set
		{
			if ((this._ExternalUrl != value))
			{
				this.OnExternalUrlChanging(value);
				this.SendPropertyChanging();
				this._ExternalUrl = value;
				this.SendPropertyChanged("ExternalUrl");
				this.OnExternalUrlChanged();
			}
		}
	}
	
	[Association(Name="UserInfo_New", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.News.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.News.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.OpenHouseDate")]
public partial class OpenHouseDate : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OpenHouseDateID;
	
	private int _FormEntryID;
	
	private System.DateTime _EventDate;
	
	private EntityRef<FormEntry> _FormEntry;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOpenHouseDateIDChanging(int value);
    partial void OnOpenHouseDateIDChanged();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    #endregion
	
	public OpenHouseDate()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		OnCreated();
	}
	
	[Column(Storage="_OpenHouseDateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OpenHouseDateID
	{
		get
		{
			return this._OpenHouseDateID;
		}
		set
		{
			if ((this._OpenHouseDateID != value))
			{
				this.OnOpenHouseDateIDChanging(value);
				this.SendPropertyChanging();
				this._OpenHouseDateID = value;
				this.SendPropertyChanged("OpenHouseDateID");
				this.OnOpenHouseDateIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int NOT NULL")]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_EventDate", DbType="DateTime NOT NULL")]
	public System.DateTime EventDate
	{
		get
		{
			return this._EventDate;
		}
		set
		{
			if ((this._EventDate != value))
			{
				this.OnEventDateChanging(value);
				this.SendPropertyChanging();
				this._EventDate = value;
				this.SendPropertyChanged("EventDate");
				this.OnEventDateChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_OpenHouseDate", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.OpenHouseDates.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.OpenHouseDates.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(int);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PaymentProfile")]
public partial class PaymentProfile : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PaymentProfileID;
	
	private int _UserInfoID;
	
	private string _AuthPaymentProfileID;
	
	private string _CardType;
	
	private string _CardNum;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentProfileIDChanging(int value);
    partial void OnPaymentProfileIDChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnAuthPaymentProfileIDChanging(string value);
    partial void OnAuthPaymentProfileIDChanged();
    partial void OnCardTypeChanging(string value);
    partial void OnCardTypeChanged();
    partial void OnCardNumChanging(string value);
    partial void OnCardNumChanged();
    #endregion
	
	public PaymentProfile()
	{
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_PaymentProfileID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int PaymentProfileID
	{
		get
		{
			return this._PaymentProfileID;
		}
		set
		{
			if ((this._PaymentProfileID != value))
			{
				this.OnPaymentProfileIDChanging(value);
				this.SendPropertyChanging();
				this._PaymentProfileID = value;
				this.SendPropertyChanged("PaymentProfileID");
				this.OnPaymentProfileIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_AuthPaymentProfileID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string AuthPaymentProfileID
	{
		get
		{
			return this._AuthPaymentProfileID;
		}
		set
		{
			if ((this._AuthPaymentProfileID != value))
			{
				this.OnAuthPaymentProfileIDChanging(value);
				this.SendPropertyChanging();
				this._AuthPaymentProfileID = value;
				this.SendPropertyChanged("AuthPaymentProfileID");
				this.OnAuthPaymentProfileIDChanged();
			}
		}
	}
	
	[Column(Storage="_CardType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string CardType
	{
		get
		{
			return this._CardType;
		}
		set
		{
			if ((this._CardType != value))
			{
				this.OnCardTypeChanging(value);
				this.SendPropertyChanging();
				this._CardType = value;
				this.SendPropertyChanged("CardType");
				this.OnCardTypeChanged();
			}
		}
	}
	
	[Column(Storage="_CardNum", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string CardNum
	{
		get
		{
			return this._CardNum;
		}
		set
		{
			if ((this._CardNum != value))
			{
				this.OnCardNumChanging(value);
				this.SendPropertyChanging();
				this._CardNum = value;
				this.SendPropertyChanged("CardNum");
				this.OnCardNumChanged();
			}
		}
	}
	
	[Association(Name="UserInfo_PaymentProfile", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.PaymentProfiles.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.PaymentProfiles.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Price")]
public partial class Price : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _PriceID;
	
	private int _Amount;
	
	private string _Display;
	
	private int _Type;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPriceIDChanging(int value);
    partial void OnPriceIDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnDisplayChanging(string value);
    partial void OnDisplayChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
	
	public Price()
	{
		OnCreated();
	}
	
	[Column(Storage="_PriceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int PriceID
	{
		get
		{
			return this._PriceID;
		}
		set
		{
			if ((this._PriceID != value))
			{
				this.OnPriceIDChanging(value);
				this.SendPropertyChanging();
				this._PriceID = value;
				this.SendPropertyChanged("PriceID");
				this.OnPriceIDChanged();
			}
		}
	}
	
	[Column(Storage="_Amount", DbType="Int NOT NULL")]
	public int Amount
	{
		get
		{
			return this._Amount;
		}
		set
		{
			if ((this._Amount != value))
			{
				this.OnAmountChanging(value);
				this.SendPropertyChanging();
				this._Amount = value;
				this.SendPropertyChanged("Amount");
				this.OnAmountChanged();
			}
		}
	}
	
	[Column(Storage="_Display", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Display
	{
		get
		{
			return this._Display;
		}
		set
		{
			if ((this._Display != value))
			{
				this.OnDisplayChanging(value);
				this.SendPropertyChanging();
				this._Display = value;
				this.SendPropertyChanged("Display");
				this.OnDisplayChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.SavedFormEntry")]
public partial class SavedFormEntry : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SavedFormEntryID;
	
	private int _UserInfoID;
	
	private int _FormEntryID;
	
	private System.DateTime _Created;
	
	private EntityRef<FormEntry> _FormEntry;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSavedFormEntryIDChanging(int value);
    partial void OnSavedFormEntryIDChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnFormEntryIDChanging(int value);
    partial void OnFormEntryIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
	
	public SavedFormEntry()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_SavedFormEntryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SavedFormEntryID
	{
		get
		{
			return this._SavedFormEntryID;
		}
		set
		{
			if ((this._SavedFormEntryID != value))
			{
				this.OnSavedFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._SavedFormEntryID = value;
				this.SendPropertyChanged("SavedFormEntryID");
				this.OnSavedFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int NOT NULL")]
	public int FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_SavedFormEntry", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.SavedFormEntries.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.SavedFormEntries.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(int);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	[Association(Name="UserInfo_SavedFormEntry", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.SavedFormEntries.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.SavedFormEntries.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.SavedSearch")]
public partial class SavedSearch : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SavedSearchID;
	
	private int _UserInfoID;
	
	private string _SearchName;
	
	private string _Criteria;
	
	private System.DateTime _Created;
	
	private System.DateTime _LastUsed;
	
	private bool _EmailListings;
	
	private EntitySet<SavedSearchFormEntryHistory> _SavedSearchFormEntryHistories;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSavedSearchIDChanging(int value);
    partial void OnSavedSearchIDChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnSearchNameChanging(string value);
    partial void OnSearchNameChanged();
    partial void OnCriteriaChanging(string value);
    partial void OnCriteriaChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastUsedChanging(System.DateTime value);
    partial void OnLastUsedChanged();
    partial void OnEmailListingsChanging(bool value);
    partial void OnEmailListingsChanged();
    #endregion
	
	public SavedSearch()
	{
		this._SavedSearchFormEntryHistories = new EntitySet<SavedSearchFormEntryHistory>(new Action<SavedSearchFormEntryHistory>(this.attach_SavedSearchFormEntryHistories), new Action<SavedSearchFormEntryHistory>(this.detach_SavedSearchFormEntryHistories));
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_SavedSearchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SavedSearchID
	{
		get
		{
			return this._SavedSearchID;
		}
		set
		{
			if ((this._SavedSearchID != value))
			{
				this.OnSavedSearchIDChanging(value);
				this.SendPropertyChanging();
				this._SavedSearchID = value;
				this.SendPropertyChanged("SavedSearchID");
				this.OnSavedSearchIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_SearchName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string SearchName
	{
		get
		{
			return this._SearchName;
		}
		set
		{
			if ((this._SearchName != value))
			{
				this.OnSearchNameChanging(value);
				this.SendPropertyChanging();
				this._SearchName = value;
				this.SendPropertyChanged("SearchName");
				this.OnSearchNameChanged();
			}
		}
	}
	
	[Column(Storage="_Criteria", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Criteria
	{
		get
		{
			return this._Criteria;
		}
		set
		{
			if ((this._Criteria != value))
			{
				this.OnCriteriaChanging(value);
				this.SendPropertyChanging();
				this._Criteria = value;
				this.SendPropertyChanged("Criteria");
				this.OnCriteriaChanged();
			}
		}
	}
	
	[Column(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_LastUsed", DbType="DateTime NOT NULL")]
	public System.DateTime LastUsed
	{
		get
		{
			return this._LastUsed;
		}
		set
		{
			if ((this._LastUsed != value))
			{
				this.OnLastUsedChanging(value);
				this.SendPropertyChanging();
				this._LastUsed = value;
				this.SendPropertyChanged("LastUsed");
				this.OnLastUsedChanged();
			}
		}
	}
	
	[Column(Storage="_EmailListings", DbType="Bit NOT NULL")]
	public bool EmailListings
	{
		get
		{
			return this._EmailListings;
		}
		set
		{
			if ((this._EmailListings != value))
			{
				this.OnEmailListingsChanging(value);
				this.SendPropertyChanging();
				this._EmailListings = value;
				this.SendPropertyChanged("EmailListings");
				this.OnEmailListingsChanged();
			}
		}
	}
	
	[Association(Name="SavedSearch_SavedSearchFormEntryHistory", Storage="_SavedSearchFormEntryHistories", ThisKey="SavedSearchID", OtherKey="SavedSearchID")]
	public EntitySet<SavedSearchFormEntryHistory> SavedSearchFormEntryHistories
	{
		get
		{
			return this._SavedSearchFormEntryHistories;
		}
		set
		{
			this._SavedSearchFormEntryHistories.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_SavedSearch", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.SavedSearches.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.SavedSearches.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SavedSearchFormEntryHistories(SavedSearchFormEntryHistory entity)
	{
		this.SendPropertyChanging();
		entity.SavedSearch = this;
	}
	
	private void detach_SavedSearchFormEntryHistories(SavedSearchFormEntryHistory entity)
	{
		this.SendPropertyChanging();
		entity.SavedSearch = null;
	}
}

[Table(Name="dbo.SavedSearchFormEntryHistory")]
public partial class SavedSearchFormEntryHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IndexID;
	
	private System.Nullable<int> _SavedSearchID;
	
	private System.Nullable<int> _FormEntryID;
	
	private System.DateTime _Sent;
	
	private EntityRef<FormEntry> _FormEntry;
	
	private EntityRef<SavedSearch> _SavedSearch;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexIDChanging(int value);
    partial void OnIndexIDChanged();
    partial void OnSavedSearchIDChanging(System.Nullable<int> value);
    partial void OnSavedSearchIDChanged();
    partial void OnFormEntryIDChanging(System.Nullable<int> value);
    partial void OnFormEntryIDChanged();
    partial void OnSentChanging(System.DateTime value);
    partial void OnSentChanged();
    #endregion
	
	public SavedSearchFormEntryHistory()
	{
		this._FormEntry = default(EntityRef<FormEntry>);
		this._SavedSearch = default(EntityRef<SavedSearch>);
		OnCreated();
	}
	
	[Column(Storage="_IndexID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IndexID
	{
		get
		{
			return this._IndexID;
		}
		set
		{
			if ((this._IndexID != value))
			{
				this.OnIndexIDChanging(value);
				this.SendPropertyChanging();
				this._IndexID = value;
				this.SendPropertyChanged("IndexID");
				this.OnIndexIDChanged();
			}
		}
	}
	
	[Column(Storage="_SavedSearchID", DbType="Int")]
	public System.Nullable<int> SavedSearchID
	{
		get
		{
			return this._SavedSearchID;
		}
		set
		{
			if ((this._SavedSearchID != value))
			{
				if (this._SavedSearch.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSavedSearchIDChanging(value);
				this.SendPropertyChanging();
				this._SavedSearchID = value;
				this.SendPropertyChanged("SavedSearchID");
				this.OnSavedSearchIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormEntryID", DbType="Int")]
	public System.Nullable<int> FormEntryID
	{
		get
		{
			return this._FormEntryID;
		}
		set
		{
			if ((this._FormEntryID != value))
			{
				if (this._FormEntry.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFormEntryIDChanging(value);
				this.SendPropertyChanging();
				this._FormEntryID = value;
				this.SendPropertyChanged("FormEntryID");
				this.OnFormEntryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Sent", DbType="SmallDateTime NOT NULL")]
	public System.DateTime Sent
	{
		get
		{
			return this._Sent;
		}
		set
		{
			if ((this._Sent != value))
			{
				this.OnSentChanging(value);
				this.SendPropertyChanging();
				this._Sent = value;
				this.SendPropertyChanged("Sent");
				this.OnSentChanged();
			}
		}
	}
	
	[Association(Name="FormEntry_SavedSearchFormEntryHistory", Storage="_FormEntry", ThisKey="FormEntryID", OtherKey="FormEntryID", IsForeignKey=true)]
	public FormEntry FormEntry
	{
		get
		{
			return this._FormEntry.Entity;
		}
		set
		{
			FormEntry previousValue = this._FormEntry.Entity;
			if (((previousValue != value) 
						|| (this._FormEntry.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._FormEntry.Entity = null;
					previousValue.SavedSearchFormEntryHistories.Remove(this);
				}
				this._FormEntry.Entity = value;
				if ((value != null))
				{
					value.SavedSearchFormEntryHistories.Add(this);
					this._FormEntryID = value.FormEntryID;
				}
				else
				{
					this._FormEntryID = default(Nullable<int>);
				}
				this.SendPropertyChanged("FormEntry");
			}
		}
	}
	
	[Association(Name="SavedSearch_SavedSearchFormEntryHistory", Storage="_SavedSearch", ThisKey="SavedSearchID", OtherKey="SavedSearchID", IsForeignKey=true)]
	public SavedSearch SavedSearch
	{
		get
		{
			return this._SavedSearch.Entity;
		}
		set
		{
			SavedSearch previousValue = this._SavedSearch.Entity;
			if (((previousValue != value) 
						|| (this._SavedSearch.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SavedSearch.Entity = null;
					previousValue.SavedSearchFormEntryHistories.Remove(this);
				}
				this._SavedSearch.Entity = value;
				if ((value != null))
				{
					value.SavedSearchFormEntryHistories.Add(this);
					this._SavedSearchID = value.SavedSearchID;
				}
				else
				{
					this._SavedSearchID = default(Nullable<int>);
				}
				this.SendPropertyChanged("SavedSearch");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.State")]
public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _StateID;
	
	private string _Name;
	
	private string _Abbreviation;
	
	private string _Capital;
	
	private int _CountryID;
	
	private bool _Minor;
	
	private EntitySet<Agency> _Agencies;
	
	private EntitySet<FormEntry> _FormEntries;
	
	private EntitySet<UserInfo> _UserInfos;
	
	private EntityRef<Country> _Country;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIDChanging(int value);
    partial void OnStateIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnCapitalChanging(string value);
    partial void OnCapitalChanged();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnMinorChanging(bool value);
    partial void OnMinorChanged();
    #endregion
	
	public State()
	{
		this._Agencies = new EntitySet<Agency>(new Action<Agency>(this.attach_Agencies), new Action<Agency>(this.detach_Agencies));
		this._FormEntries = new EntitySet<FormEntry>(new Action<FormEntry>(this.attach_FormEntries), new Action<FormEntry>(this.detach_FormEntries));
		this._UserInfos = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfos), new Action<UserInfo>(this.detach_UserInfos));
		this._Country = default(EntityRef<Country>);
		OnCreated();
	}
	
	[Column(Storage="_StateID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int StateID
	{
		get
		{
			return this._StateID;
		}
		set
		{
			if ((this._StateID != value))
			{
				this.OnStateIDChanging(value);
				this.SendPropertyChanging();
				this._StateID = value;
				this.SendPropertyChanged("StateID");
				this.OnStateIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Abbreviation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Abbreviation
	{
		get
		{
			return this._Abbreviation;
		}
		set
		{
			if ((this._Abbreviation != value))
			{
				this.OnAbbreviationChanging(value);
				this.SendPropertyChanging();
				this._Abbreviation = value;
				this.SendPropertyChanged("Abbreviation");
				this.OnAbbreviationChanged();
			}
		}
	}
	
	[Column(Storage="_Capital", DbType="VarChar(50)")]
	public string Capital
	{
		get
		{
			return this._Capital;
		}
		set
		{
			if ((this._Capital != value))
			{
				this.OnCapitalChanging(value);
				this.SendPropertyChanging();
				this._Capital = value;
				this.SendPropertyChanged("Capital");
				this.OnCapitalChanged();
			}
		}
	}
	
	[Column(Storage="_CountryID", DbType="Int NOT NULL")]
	public int CountryID
	{
		get
		{
			return this._CountryID;
		}
		set
		{
			if ((this._CountryID != value))
			{
				if (this._Country.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCountryIDChanging(value);
				this.SendPropertyChanging();
				this._CountryID = value;
				this.SendPropertyChanged("CountryID");
				this.OnCountryIDChanged();
			}
		}
	}
	
	[Column(Storage="_Minor", DbType="Bit NOT NULL")]
	public bool Minor
	{
		get
		{
			return this._Minor;
		}
		set
		{
			if ((this._Minor != value))
			{
				this.OnMinorChanging(value);
				this.SendPropertyChanging();
				this._Minor = value;
				this.SendPropertyChanged("Minor");
				this.OnMinorChanged();
			}
		}
	}
	
	[Association(Name="State_Agency", Storage="_Agencies", ThisKey="StateID", OtherKey="StateID")]
	public EntitySet<Agency> Agencies
	{
		get
		{
			return this._Agencies;
		}
		set
		{
			this._Agencies.Assign(value);
		}
	}
	
	[Association(Name="State_FormEntry", Storage="_FormEntries", ThisKey="StateID", OtherKey="StateID")]
	public EntitySet<FormEntry> FormEntries
	{
		get
		{
			return this._FormEntries;
		}
		set
		{
			this._FormEntries.Assign(value);
		}
	}
	
	[Association(Name="State_UserInfo", Storage="_UserInfos", ThisKey="StateID", OtherKey="StateID")]
	public EntitySet<UserInfo> UserInfos
	{
		get
		{
			return this._UserInfos;
		}
		set
		{
			this._UserInfos.Assign(value);
		}
	}
	
	[Association(Name="Country_State", Storage="_Country", ThisKey="CountryID", OtherKey="CountryID", IsForeignKey=true)]
	public Country Country
	{
		get
		{
			return this._Country.Entity;
		}
		set
		{
			Country previousValue = this._Country.Entity;
			if (((previousValue != value) 
						|| (this._Country.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Country.Entity = null;
					previousValue.States.Remove(this);
				}
				this._Country.Entity = value;
				if ((value != null))
				{
					value.States.Add(this);
					this._CountryID = value.CountryID;
				}
				else
				{
					this._CountryID = default(int);
				}
				this.SendPropertyChanged("Country");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Agencies(Agency entity)
	{
		this.SendPropertyChanging();
		entity.State = this;
	}
	
	private void detach_Agencies(Agency entity)
	{
		this.SendPropertyChanging();
		entity.State = null;
	}
	
	private void attach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.State = this;
	}
	
	private void detach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.State = null;
	}
	
	private void attach_UserInfos(UserInfo entity)
	{
		this.SendPropertyChanging();
		entity.State = this;
	}
	
	private void detach_UserInfos(UserInfo entity)
	{
		this.SendPropertyChanging();
		entity.State = null;
	}
}

[Table(Name="dbo.Subscription")]
public partial class Subscription : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SubscriptionID;
	
	private int _SubscriptionTypeID;
	
	private int _UserInfoID;
	
	private System.DateTime _Created;
	
	private System.DateTime _Expires;
	
	private bool _AutoRecurring;
	
	private string _AuthSubscriptionID;
	
	private bool _Cancelled;
	
	private EntityRef<SubscriptionType> _SubscriptionType;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionIDChanging(int value);
    partial void OnSubscriptionIDChanged();
    partial void OnSubscriptionTypeIDChanging(int value);
    partial void OnSubscriptionTypeIDChanged();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnExpiresChanging(System.DateTime value);
    partial void OnExpiresChanged();
    partial void OnAutoRecurringChanging(bool value);
    partial void OnAutoRecurringChanged();
    partial void OnAuthSubscriptionIDChanging(string value);
    partial void OnAuthSubscriptionIDChanged();
    partial void OnCancelledChanging(bool value);
    partial void OnCancelledChanged();
    #endregion
	
	public Subscription()
	{
		this._SubscriptionType = default(EntityRef<SubscriptionType>);
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_SubscriptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SubscriptionID
	{
		get
		{
			return this._SubscriptionID;
		}
		set
		{
			if ((this._SubscriptionID != value))
			{
				this.OnSubscriptionIDChanging(value);
				this.SendPropertyChanging();
				this._SubscriptionID = value;
				this.SendPropertyChanged("SubscriptionID");
				this.OnSubscriptionIDChanged();
			}
		}
	}
	
	[Column(Storage="_SubscriptionTypeID", DbType="Int NOT NULL")]
	public int SubscriptionTypeID
	{
		get
		{
			return this._SubscriptionTypeID;
		}
		set
		{
			if ((this._SubscriptionTypeID != value))
			{
				if (this._SubscriptionType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubscriptionTypeIDChanging(value);
				this.SendPropertyChanging();
				this._SubscriptionTypeID = value;
				this.SendPropertyChanged("SubscriptionTypeID");
				this.OnSubscriptionTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int NOT NULL")]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_Expires", DbType="DateTime NOT NULL")]
	public System.DateTime Expires
	{
		get
		{
			return this._Expires;
		}
		set
		{
			if ((this._Expires != value))
			{
				this.OnExpiresChanging(value);
				this.SendPropertyChanging();
				this._Expires = value;
				this.SendPropertyChanged("Expires");
				this.OnExpiresChanged();
			}
		}
	}
	
	[Column(Storage="_AutoRecurring", DbType="Bit NOT NULL")]
	public bool AutoRecurring
	{
		get
		{
			return this._AutoRecurring;
		}
		set
		{
			if ((this._AutoRecurring != value))
			{
				this.OnAutoRecurringChanging(value);
				this.SendPropertyChanging();
				this._AutoRecurring = value;
				this.SendPropertyChanged("AutoRecurring");
				this.OnAutoRecurringChanged();
			}
		}
	}
	
	[Column(Storage="_AuthSubscriptionID", DbType="VarChar(50)")]
	public string AuthSubscriptionID
	{
		get
		{
			return this._AuthSubscriptionID;
		}
		set
		{
			if ((this._AuthSubscriptionID != value))
			{
				this.OnAuthSubscriptionIDChanging(value);
				this.SendPropertyChanging();
				this._AuthSubscriptionID = value;
				this.SendPropertyChanged("AuthSubscriptionID");
				this.OnAuthSubscriptionIDChanged();
			}
		}
	}
	
	[Column(Storage="_Cancelled", DbType="Bit NOT NULL")]
	public bool Cancelled
	{
		get
		{
			return this._Cancelled;
		}
		set
		{
			if ((this._Cancelled != value))
			{
				this.OnCancelledChanging(value);
				this.SendPropertyChanging();
				this._Cancelled = value;
				this.SendPropertyChanged("Cancelled");
				this.OnCancelledChanged();
			}
		}
	}
	
	[Association(Name="SubscriptionType_Subscription", Storage="_SubscriptionType", ThisKey="SubscriptionTypeID", OtherKey="SubscriptionTypeID", IsForeignKey=true)]
	public SubscriptionType SubscriptionType
	{
		get
		{
			return this._SubscriptionType.Entity;
		}
		set
		{
			SubscriptionType previousValue = this._SubscriptionType.Entity;
			if (((previousValue != value) 
						|| (this._SubscriptionType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SubscriptionType.Entity = null;
					previousValue.Subscriptions.Remove(this);
				}
				this._SubscriptionType.Entity = value;
				if ((value != null))
				{
					value.Subscriptions.Add(this);
					this._SubscriptionTypeID = value.SubscriptionTypeID;
				}
				else
				{
					this._SubscriptionTypeID = default(int);
				}
				this.SendPropertyChanged("SubscriptionType");
			}
		}
	}
	
	[Association(Name="UserInfo_Subscription", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.Subscriptions.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.Subscriptions.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(int);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.SubscriptionType")]
public partial class SubscriptionType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SubscriptionTypeID;
	
	private string _Name;
	
	private string _Description;
	
	private int _BillingPeriod;
	
	private decimal _BillingAmount;
	
	private bool _AllowPublic;
	
	private int _PostsPerMonth;
	
	private EntitySet<Subscription> _Subscriptions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscriptionTypeIDChanging(int value);
    partial void OnSubscriptionTypeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBillingPeriodChanging(int value);
    partial void OnBillingPeriodChanged();
    partial void OnBillingAmountChanging(decimal value);
    partial void OnBillingAmountChanged();
    partial void OnAllowPublicChanging(bool value);
    partial void OnAllowPublicChanged();
    partial void OnPostsPerMonthChanging(int value);
    partial void OnPostsPerMonthChanged();
    #endregion
	
	public SubscriptionType()
	{
		this._Subscriptions = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscriptions), new Action<Subscription>(this.detach_Subscriptions));
		OnCreated();
	}
	
	[Column(Storage="_SubscriptionTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SubscriptionTypeID
	{
		get
		{
			return this._SubscriptionTypeID;
		}
		set
		{
			if ((this._SubscriptionTypeID != value))
			{
				this.OnSubscriptionTypeIDChanging(value);
				this.SendPropertyChanging();
				this._SubscriptionTypeID = value;
				this.SendPropertyChanged("SubscriptionTypeID");
				this.OnSubscriptionTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_BillingPeriod", DbType="Int NOT NULL")]
	public int BillingPeriod
	{
		get
		{
			return this._BillingPeriod;
		}
		set
		{
			if ((this._BillingPeriod != value))
			{
				this.OnBillingPeriodChanging(value);
				this.SendPropertyChanging();
				this._BillingPeriod = value;
				this.SendPropertyChanged("BillingPeriod");
				this.OnBillingPeriodChanged();
			}
		}
	}
	
	[Column(Storage="_BillingAmount", DbType="Decimal(5,2) NOT NULL")]
	public decimal BillingAmount
	{
		get
		{
			return this._BillingAmount;
		}
		set
		{
			if ((this._BillingAmount != value))
			{
				this.OnBillingAmountChanging(value);
				this.SendPropertyChanging();
				this._BillingAmount = value;
				this.SendPropertyChanged("BillingAmount");
				this.OnBillingAmountChanged();
			}
		}
	}
	
	[Column(Storage="_AllowPublic", DbType="Bit NOT NULL")]
	public bool AllowPublic
	{
		get
		{
			return this._AllowPublic;
		}
		set
		{
			if ((this._AllowPublic != value))
			{
				this.OnAllowPublicChanging(value);
				this.SendPropertyChanging();
				this._AllowPublic = value;
				this.SendPropertyChanged("AllowPublic");
				this.OnAllowPublicChanged();
			}
		}
	}
	
	[Column(Storage="_PostsPerMonth", DbType="Int NOT NULL")]
	public int PostsPerMonth
	{
		get
		{
			return this._PostsPerMonth;
		}
		set
		{
			if ((this._PostsPerMonth != value))
			{
				this.OnPostsPerMonthChanging(value);
				this.SendPropertyChanging();
				this._PostsPerMonth = value;
				this.SendPropertyChanged("PostsPerMonth");
				this.OnPostsPerMonthChanged();
			}
		}
	}
	
	[Association(Name="SubscriptionType_Subscription", Storage="_Subscriptions", ThisKey="SubscriptionTypeID", OtherKey="SubscriptionTypeID")]
	public EntitySet<Subscription> Subscriptions
	{
		get
		{
			return this._Subscriptions;
		}
		set
		{
			this._Subscriptions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Subscriptions(Subscription entity)
	{
		this.SendPropertyChanging();
		entity.SubscriptionType = this;
	}
	
	private void detach_Subscriptions(Subscription entity)
	{
		this.SendPropertyChanging();
		entity.SubscriptionType = null;
	}
}

[Table(Name="dbo.SystemAlert")]
public partial class SystemAlert : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SystemAlertID;
	
	private string _Name;
	
	private string _Description;
	
	private string _SourceTables;
	
	private string _SelectClause;
	
	private string _WhereCondition;
	
	private string _OrderByClause;
	
	private string _HTMLTemplateUrl;
	
	private string _TextTemplateUrl;
	
	private short _FrequencyHours;
	
	private short _ExpirationHours;
	
	private bool _IsActive;
	
	private System.DateTime _Created;
	
	private System.Nullable<System.DateTime> _LastProcessed;
	
	private EntitySet<SystemAlertUserHistory> _SystemAlertUserHistories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSystemAlertIDChanging(int value);
    partial void OnSystemAlertIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSourceTablesChanging(string value);
    partial void OnSourceTablesChanged();
    partial void OnSelectClauseChanging(string value);
    partial void OnSelectClauseChanged();
    partial void OnWhereConditionChanging(string value);
    partial void OnWhereConditionChanged();
    partial void OnOrderByClauseChanging(string value);
    partial void OnOrderByClauseChanged();
    partial void OnHTMLTemplateUrlChanging(string value);
    partial void OnHTMLTemplateUrlChanged();
    partial void OnTextTemplateUrlChanging(string value);
    partial void OnTextTemplateUrlChanged();
    partial void OnFrequencyHoursChanging(short value);
    partial void OnFrequencyHoursChanged();
    partial void OnExpirationHoursChanging(short value);
    partial void OnExpirationHoursChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastProcessedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastProcessedChanged();
    #endregion
	
	public SystemAlert()
	{
		this._SystemAlertUserHistories = new EntitySet<SystemAlertUserHistory>(new Action<SystemAlertUserHistory>(this.attach_SystemAlertUserHistories), new Action<SystemAlertUserHistory>(this.detach_SystemAlertUserHistories));
		OnCreated();
	}
	
	[Column(Storage="_SystemAlertID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SystemAlertID
	{
		get
		{
			return this._SystemAlertID;
		}
		set
		{
			if ((this._SystemAlertID != value))
			{
				this.OnSystemAlertIDChanging(value);
				this.SendPropertyChanging();
				this._SystemAlertID = value;
				this.SendPropertyChanged("SystemAlertID");
				this.OnSystemAlertIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(400)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_SourceTables", DbType="VarChar(100)")]
	public string SourceTables
	{
		get
		{
			return this._SourceTables;
		}
		set
		{
			if ((this._SourceTables != value))
			{
				this.OnSourceTablesChanging(value);
				this.SendPropertyChanging();
				this._SourceTables = value;
				this.SendPropertyChanged("SourceTables");
				this.OnSourceTablesChanged();
			}
		}
	}
	
	[Column(Storage="_SelectClause", DbType="VarChar(1000)")]
	public string SelectClause
	{
		get
		{
			return this._SelectClause;
		}
		set
		{
			if ((this._SelectClause != value))
			{
				this.OnSelectClauseChanging(value);
				this.SendPropertyChanging();
				this._SelectClause = value;
				this.SendPropertyChanged("SelectClause");
				this.OnSelectClauseChanged();
			}
		}
	}
	
	[Column(Storage="_WhereCondition", DbType="VarChar(2000)")]
	public string WhereCondition
	{
		get
		{
			return this._WhereCondition;
		}
		set
		{
			if ((this._WhereCondition != value))
			{
				this.OnWhereConditionChanging(value);
				this.SendPropertyChanging();
				this._WhereCondition = value;
				this.SendPropertyChanged("WhereCondition");
				this.OnWhereConditionChanged();
			}
		}
	}
	
	[Column(Storage="_OrderByClause", DbType="VarChar(250)")]
	public string OrderByClause
	{
		get
		{
			return this._OrderByClause;
		}
		set
		{
			if ((this._OrderByClause != value))
			{
				this.OnOrderByClauseChanging(value);
				this.SendPropertyChanging();
				this._OrderByClause = value;
				this.SendPropertyChanged("OrderByClause");
				this.OnOrderByClauseChanged();
			}
		}
	}
	
	[Column(Storage="_HTMLTemplateUrl", DbType="VarChar(128)")]
	public string HTMLTemplateUrl
	{
		get
		{
			return this._HTMLTemplateUrl;
		}
		set
		{
			if ((this._HTMLTemplateUrl != value))
			{
				this.OnHTMLTemplateUrlChanging(value);
				this.SendPropertyChanging();
				this._HTMLTemplateUrl = value;
				this.SendPropertyChanged("HTMLTemplateUrl");
				this.OnHTMLTemplateUrlChanged();
			}
		}
	}
	
	[Column(Storage="_TextTemplateUrl", DbType="VarChar(128)")]
	public string TextTemplateUrl
	{
		get
		{
			return this._TextTemplateUrl;
		}
		set
		{
			if ((this._TextTemplateUrl != value))
			{
				this.OnTextTemplateUrlChanging(value);
				this.SendPropertyChanging();
				this._TextTemplateUrl = value;
				this.SendPropertyChanged("TextTemplateUrl");
				this.OnTextTemplateUrlChanged();
			}
		}
	}
	
	[Column(Storage="_FrequencyHours", DbType="SmallInt NOT NULL")]
	public short FrequencyHours
	{
		get
		{
			return this._FrequencyHours;
		}
		set
		{
			if ((this._FrequencyHours != value))
			{
				this.OnFrequencyHoursChanging(value);
				this.SendPropertyChanging();
				this._FrequencyHours = value;
				this.SendPropertyChanged("FrequencyHours");
				this.OnFrequencyHoursChanged();
			}
		}
	}
	
	[Column(Storage="_ExpirationHours", DbType="SmallInt NOT NULL")]
	public short ExpirationHours
	{
		get
		{
			return this._ExpirationHours;
		}
		set
		{
			if ((this._ExpirationHours != value))
			{
				this.OnExpirationHoursChanging(value);
				this.SendPropertyChanging();
				this._ExpirationHours = value;
				this.SendPropertyChanged("ExpirationHours");
				this.OnExpirationHoursChanged();
			}
		}
	}
	
	[Column(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[Column(Storage="_Created", DbType="SmallDateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_LastProcessed", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> LastProcessed
	{
		get
		{
			return this._LastProcessed;
		}
		set
		{
			if ((this._LastProcessed != value))
			{
				this.OnLastProcessedChanging(value);
				this.SendPropertyChanging();
				this._LastProcessed = value;
				this.SendPropertyChanged("LastProcessed");
				this.OnLastProcessedChanged();
			}
		}
	}
	
	[Association(Name="SystemAlert_SystemAlertUserHistory", Storage="_SystemAlertUserHistories", ThisKey="SystemAlertID", OtherKey="SystemAlertID")]
	public EntitySet<SystemAlertUserHistory> SystemAlertUserHistories
	{
		get
		{
			return this._SystemAlertUserHistories;
		}
		set
		{
			this._SystemAlertUserHistories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_SystemAlertUserHistories(SystemAlertUserHistory entity)
	{
		this.SendPropertyChanging();
		entity.SystemAlert = this;
	}
	
	private void detach_SystemAlertUserHistories(SystemAlertUserHistory entity)
	{
		this.SendPropertyChanging();
		entity.SystemAlert = null;
	}
}

[Table(Name="dbo.SystemAlertUserHistory")]
public partial class SystemAlertUserHistory : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IndexID;
	
	private System.Nullable<int> _SystemAlertID;
	
	private System.Nullable<int> _UserInfoID;
	
	private System.DateTime _Sent;
	
	private EntityRef<SystemAlert> _SystemAlert;
	
	private EntityRef<UserInfo> _UserInfo;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexIDChanging(int value);
    partial void OnIndexIDChanged();
    partial void OnSystemAlertIDChanging(System.Nullable<int> value);
    partial void OnSystemAlertIDChanged();
    partial void OnUserInfoIDChanging(System.Nullable<int> value);
    partial void OnUserInfoIDChanged();
    partial void OnSentChanging(System.DateTime value);
    partial void OnSentChanged();
    #endregion
	
	public SystemAlertUserHistory()
	{
		this._SystemAlert = default(EntityRef<SystemAlert>);
		this._UserInfo = default(EntityRef<UserInfo>);
		OnCreated();
	}
	
	[Column(Storage="_IndexID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IndexID
	{
		get
		{
			return this._IndexID;
		}
		set
		{
			if ((this._IndexID != value))
			{
				this.OnIndexIDChanging(value);
				this.SendPropertyChanging();
				this._IndexID = value;
				this.SendPropertyChanged("IndexID");
				this.OnIndexIDChanged();
			}
		}
	}
	
	[Column(Storage="_SystemAlertID", DbType="Int")]
	public System.Nullable<int> SystemAlertID
	{
		get
		{
			return this._SystemAlertID;
		}
		set
		{
			if ((this._SystemAlertID != value))
			{
				if (this._SystemAlert.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSystemAlertIDChanging(value);
				this.SendPropertyChanging();
				this._SystemAlertID = value;
				this.SendPropertyChanged("SystemAlertID");
				this.OnSystemAlertIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserInfoID", DbType="Int")]
	public System.Nullable<int> UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				if (this._UserInfo.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_Sent", DbType="SmallDateTime NOT NULL")]
	public System.DateTime Sent
	{
		get
		{
			return this._Sent;
		}
		set
		{
			if ((this._Sent != value))
			{
				this.OnSentChanging(value);
				this.SendPropertyChanging();
				this._Sent = value;
				this.SendPropertyChanged("Sent");
				this.OnSentChanged();
			}
		}
	}
	
	[Association(Name="SystemAlert_SystemAlertUserHistory", Storage="_SystemAlert", ThisKey="SystemAlertID", OtherKey="SystemAlertID", IsForeignKey=true)]
	public SystemAlert SystemAlert
	{
		get
		{
			return this._SystemAlert.Entity;
		}
		set
		{
			SystemAlert previousValue = this._SystemAlert.Entity;
			if (((previousValue != value) 
						|| (this._SystemAlert.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SystemAlert.Entity = null;
					previousValue.SystemAlertUserHistories.Remove(this);
				}
				this._SystemAlert.Entity = value;
				if ((value != null))
				{
					value.SystemAlertUserHistories.Add(this);
					this._SystemAlertID = value.SystemAlertID;
				}
				else
				{
					this._SystemAlertID = default(Nullable<int>);
				}
				this.SendPropertyChanged("SystemAlert");
			}
		}
	}
	
	[Association(Name="UserInfo_SystemAlertUserHistory", Storage="_UserInfo", ThisKey="UserInfoID", OtherKey="UserInfoID", IsForeignKey=true)]
	public UserInfo UserInfo
	{
		get
		{
			return this._UserInfo.Entity;
		}
		set
		{
			UserInfo previousValue = this._UserInfo.Entity;
			if (((previousValue != value) 
						|| (this._UserInfo.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserInfo.Entity = null;
					previousValue.SystemAlertUserHistories.Remove(this);
				}
				this._UserInfo.Entity = value;
				if ((value != null))
				{
					value.SystemAlertUserHistories.Add(this);
					this._UserInfoID = value.UserInfoID;
				}
				else
				{
					this._UserInfoID = default(Nullable<int>);
				}
				this.SendPropertyChanged("UserInfo");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserInfo")]
public partial class UserInfo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserInfoID;
	
	private int _UserTypeID;
	
	private int _AgencyID;
	
	private string _Login;
	
	private string _Password;
	
	private string _Email;
	
	private string _FirstName;
	
	private string _LastName;
	
	private string _Company;
	
	private string _Address;
	
	private string _City;
	
	private System.Nullable<int> _StateID;
	
	private string _ZipCode;
	
	private string _Phone;
	
	private string _CellPhone;
	
	private System.Nullable<int> _CellPhoneProviderID;
	
	private bool _CellPhoneContact;
	
	private System.DateTime _Created;
	
	private System.DateTime _LastLogin;
	
	private string _SecurityQuestion;
	
	private string _SecurityAnswer;
	
	private string _ConfimCode;
	
	private bool _Active;
	
	private EntitySet<Agency> _Agencies;
	
	private EntitySet<Announcement> _Announcements;
	
	private EntitySet<FormEntry> _FormEntries;
	
	private EntitySet<New> _News;
	
	private EntitySet<PaymentProfile> _PaymentProfiles;
	
	private EntitySet<SavedFormEntry> _SavedFormEntries;
	
	private EntitySet<SavedSearch> _SavedSearches;
	
	private EntitySet<Subscription> _Subscriptions;
	
	private EntitySet<SystemAlertUserHistory> _SystemAlertUserHistories;
	
	private EntityRef<State> _State;
	
	private EntityRef<UserType> _UserType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserInfoIDChanging(int value);
    partial void OnUserInfoIDChanged();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    partial void OnAgencyIDChanging(int value);
    partial void OnAgencyIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    partial void OnCellPhoneProviderIDChanging(System.Nullable<int> value);
    partial void OnCellPhoneProviderIDChanged();
    partial void OnCellPhoneContactChanging(bool value);
    partial void OnCellPhoneContactChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnLastLoginChanging(System.DateTime value);
    partial void OnLastLoginChanged();
    partial void OnSecurityQuestionChanging(string value);
    partial void OnSecurityQuestionChanged();
    partial void OnSecurityAnswerChanging(string value);
    partial void OnSecurityAnswerChanged();
    partial void OnConfimCodeChanging(string value);
    partial void OnConfimCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
	
	public UserInfo()
	{
		this._Agencies = new EntitySet<Agency>(new Action<Agency>(this.attach_Agencies), new Action<Agency>(this.detach_Agencies));
		this._Announcements = new EntitySet<Announcement>(new Action<Announcement>(this.attach_Announcements), new Action<Announcement>(this.detach_Announcements));
		this._FormEntries = new EntitySet<FormEntry>(new Action<FormEntry>(this.attach_FormEntries), new Action<FormEntry>(this.detach_FormEntries));
		this._News = new EntitySet<New>(new Action<New>(this.attach_News), new Action<New>(this.detach_News));
		this._PaymentProfiles = new EntitySet<PaymentProfile>(new Action<PaymentProfile>(this.attach_PaymentProfiles), new Action<PaymentProfile>(this.detach_PaymentProfiles));
		this._SavedFormEntries = new EntitySet<SavedFormEntry>(new Action<SavedFormEntry>(this.attach_SavedFormEntries), new Action<SavedFormEntry>(this.detach_SavedFormEntries));
		this._SavedSearches = new EntitySet<SavedSearch>(new Action<SavedSearch>(this.attach_SavedSearches), new Action<SavedSearch>(this.detach_SavedSearches));
		this._Subscriptions = new EntitySet<Subscription>(new Action<Subscription>(this.attach_Subscriptions), new Action<Subscription>(this.detach_Subscriptions));
		this._SystemAlertUserHistories = new EntitySet<SystemAlertUserHistory>(new Action<SystemAlertUserHistory>(this.attach_SystemAlertUserHistories), new Action<SystemAlertUserHistory>(this.detach_SystemAlertUserHistories));
		this._State = default(EntityRef<State>);
		this._UserType = default(EntityRef<UserType>);
		OnCreated();
	}
	
	[Column(Storage="_UserInfoID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserInfoID
	{
		get
		{
			return this._UserInfoID;
		}
		set
		{
			if ((this._UserInfoID != value))
			{
				this.OnUserInfoIDChanging(value);
				this.SendPropertyChanging();
				this._UserInfoID = value;
				this.SendPropertyChanged("UserInfoID");
				this.OnUserInfoIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserTypeID", DbType="Int NOT NULL")]
	public int UserTypeID
	{
		get
		{
			return this._UserTypeID;
		}
		set
		{
			if ((this._UserTypeID != value))
			{
				if (this._UserType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserTypeIDChanging(value);
				this.SendPropertyChanging();
				this._UserTypeID = value;
				this.SendPropertyChanged("UserTypeID");
				this.OnUserTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_AgencyID", DbType="Int NOT NULL")]
	public int AgencyID
	{
		get
		{
			return this._AgencyID;
		}
		set
		{
			if ((this._AgencyID != value))
			{
				this.OnAgencyIDChanging(value);
				this.SendPropertyChanging();
				this._AgencyID = value;
				this.SendPropertyChanged("AgencyID");
				this.OnAgencyIDChanged();
			}
		}
	}
	
	[Column(Storage="_Login", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Login
	{
		get
		{
			return this._Login;
		}
		set
		{
			if ((this._Login != value))
			{
				this.OnLoginChanging(value);
				this.SendPropertyChanging();
				this._Login = value;
				this.SendPropertyChanged("Login");
				this.OnLoginChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[Column(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string FirstName
	{
		get
		{
			return this._FirstName;
		}
		set
		{
			if ((this._FirstName != value))
			{
				this.OnFirstNameChanging(value);
				this.SendPropertyChanging();
				this._FirstName = value;
				this.SendPropertyChanged("FirstName");
				this.OnFirstNameChanged();
			}
		}
	}
	
	[Column(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string LastName
	{
		get
		{
			return this._LastName;
		}
		set
		{
			if ((this._LastName != value))
			{
				this.OnLastNameChanging(value);
				this.SendPropertyChanging();
				this._LastName = value;
				this.SendPropertyChanged("LastName");
				this.OnLastNameChanged();
			}
		}
	}
	
	[Column(Storage="_Company", DbType="VarChar(50)")]
	public string Company
	{
		get
		{
			return this._Company;
		}
		set
		{
			if ((this._Company != value))
			{
				this.OnCompanyChanging(value);
				this.SendPropertyChanging();
				this._Company = value;
				this.SendPropertyChanged("Company");
				this.OnCompanyChanged();
			}
		}
	}
	
	[Column(Storage="_Address", DbType="VarChar(100)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[Column(Storage="_City", DbType="VarChar(100)")]
	public string City
	{
		get
		{
			return this._City;
		}
		set
		{
			if ((this._City != value))
			{
				this.OnCityChanging(value);
				this.SendPropertyChanging();
				this._City = value;
				this.SendPropertyChanged("City");
				this.OnCityChanged();
			}
		}
	}
	
	[Column(Storage="_StateID", DbType="Int")]
	public System.Nullable<int> StateID
	{
		get
		{
			return this._StateID;
		}
		set
		{
			if ((this._StateID != value))
			{
				if (this._State.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStateIDChanging(value);
				this.SendPropertyChanging();
				this._StateID = value;
				this.SendPropertyChanged("StateID");
				this.OnStateIDChanged();
			}
		}
	}
	
	[Column(Storage="_ZipCode", DbType="VarChar(50)")]
	public string ZipCode
	{
		get
		{
			return this._ZipCode;
		}
		set
		{
			if ((this._ZipCode != value))
			{
				this.OnZipCodeChanging(value);
				this.SendPropertyChanging();
				this._ZipCode = value;
				this.SendPropertyChanged("ZipCode");
				this.OnZipCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Phone", DbType="VarChar(50)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_CellPhone", DbType="VarChar(50)")]
	public string CellPhone
	{
		get
		{
			return this._CellPhone;
		}
		set
		{
			if ((this._CellPhone != value))
			{
				this.OnCellPhoneChanging(value);
				this.SendPropertyChanging();
				this._CellPhone = value;
				this.SendPropertyChanged("CellPhone");
				this.OnCellPhoneChanged();
			}
		}
	}
	
	[Column(Storage="_CellPhoneProviderID", DbType="Int")]
	public System.Nullable<int> CellPhoneProviderID
	{
		get
		{
			return this._CellPhoneProviderID;
		}
		set
		{
			if ((this._CellPhoneProviderID != value))
			{
				this.OnCellPhoneProviderIDChanging(value);
				this.SendPropertyChanging();
				this._CellPhoneProviderID = value;
				this.SendPropertyChanged("CellPhoneProviderID");
				this.OnCellPhoneProviderIDChanged();
			}
		}
	}
	
	[Column(Storage="_CellPhoneContact", DbType="Bit NOT NULL")]
	public bool CellPhoneContact
	{
		get
		{
			return this._CellPhoneContact;
		}
		set
		{
			if ((this._CellPhoneContact != value))
			{
				this.OnCellPhoneContactChanging(value);
				this.SendPropertyChanging();
				this._CellPhoneContact = value;
				this.SendPropertyChanged("CellPhoneContact");
				this.OnCellPhoneContactChanged();
			}
		}
	}
	
	[Column(Storage="_Created", DbType="DateTime NOT NULL")]
	public System.DateTime Created
	{
		get
		{
			return this._Created;
		}
		set
		{
			if ((this._Created != value))
			{
				this.OnCreatedChanging(value);
				this.SendPropertyChanging();
				this._Created = value;
				this.SendPropertyChanged("Created");
				this.OnCreatedChanged();
			}
		}
	}
	
	[Column(Storage="_LastLogin", DbType="DateTime NOT NULL")]
	public System.DateTime LastLogin
	{
		get
		{
			return this._LastLogin;
		}
		set
		{
			if ((this._LastLogin != value))
			{
				this.OnLastLoginChanging(value);
				this.SendPropertyChanging();
				this._LastLogin = value;
				this.SendPropertyChanged("LastLogin");
				this.OnLastLoginChanged();
			}
		}
	}
	
	[Column(Storage="_SecurityQuestion", DbType="VarChar(1000) NOT NULL", CanBeNull=false)]
	public string SecurityQuestion
	{
		get
		{
			return this._SecurityQuestion;
		}
		set
		{
			if ((this._SecurityQuestion != value))
			{
				this.OnSecurityQuestionChanging(value);
				this.SendPropertyChanging();
				this._SecurityQuestion = value;
				this.SendPropertyChanged("SecurityQuestion");
				this.OnSecurityQuestionChanged();
			}
		}
	}
	
	[Column(Storage="_SecurityAnswer", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string SecurityAnswer
	{
		get
		{
			return this._SecurityAnswer;
		}
		set
		{
			if ((this._SecurityAnswer != value))
			{
				this.OnSecurityAnswerChanging(value);
				this.SendPropertyChanging();
				this._SecurityAnswer = value;
				this.SendPropertyChanged("SecurityAnswer");
				this.OnSecurityAnswerChanged();
			}
		}
	}
	
	[Column(Storage="_ConfimCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
	public string ConfimCode
	{
		get
		{
			return this._ConfimCode;
		}
		set
		{
			if ((this._ConfimCode != value))
			{
				this.OnConfimCodeChanging(value);
				this.SendPropertyChanging();
				this._ConfimCode = value;
				this.SendPropertyChanged("ConfimCode");
				this.OnConfimCodeChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="Bit NOT NULL")]
	public bool Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Association(Name="UserInfo_Agency", Storage="_Agencies", ThisKey="UserInfoID", OtherKey="OwnerUserInfoID")]
	public EntitySet<Agency> Agencies
	{
		get
		{
			return this._Agencies;
		}
		set
		{
			this._Agencies.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_Announcement", Storage="_Announcements", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<Announcement> Announcements
	{
		get
		{
			return this._Announcements;
		}
		set
		{
			this._Announcements.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_FormEntry", Storage="_FormEntries", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<FormEntry> FormEntries
	{
		get
		{
			return this._FormEntries;
		}
		set
		{
			this._FormEntries.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_New", Storage="_News", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<New> News
	{
		get
		{
			return this._News;
		}
		set
		{
			this._News.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_PaymentProfile", Storage="_PaymentProfiles", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<PaymentProfile> PaymentProfiles
	{
		get
		{
			return this._PaymentProfiles;
		}
		set
		{
			this._PaymentProfiles.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_SavedFormEntry", Storage="_SavedFormEntries", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<SavedFormEntry> SavedFormEntries
	{
		get
		{
			return this._SavedFormEntries;
		}
		set
		{
			this._SavedFormEntries.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_SavedSearch", Storage="_SavedSearches", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<SavedSearch> SavedSearches
	{
		get
		{
			return this._SavedSearches;
		}
		set
		{
			this._SavedSearches.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_Subscription", Storage="_Subscriptions", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<Subscription> Subscriptions
	{
		get
		{
			return this._Subscriptions;
		}
		set
		{
			this._Subscriptions.Assign(value);
		}
	}
	
	[Association(Name="UserInfo_SystemAlertUserHistory", Storage="_SystemAlertUserHistories", ThisKey="UserInfoID", OtherKey="UserInfoID")]
	public EntitySet<SystemAlertUserHistory> SystemAlertUserHistories
	{
		get
		{
			return this._SystemAlertUserHistories;
		}
		set
		{
			this._SystemAlertUserHistories.Assign(value);
		}
	}
	
	[Association(Name="State_UserInfo", Storage="_State", ThisKey="StateID", OtherKey="StateID", IsForeignKey=true)]
	public State State
	{
		get
		{
			return this._State.Entity;
		}
		set
		{
			State previousValue = this._State.Entity;
			if (((previousValue != value) 
						|| (this._State.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._State.Entity = null;
					previousValue.UserInfos.Remove(this);
				}
				this._State.Entity = value;
				if ((value != null))
				{
					value.UserInfos.Add(this);
					this._StateID = value.StateID;
				}
				else
				{
					this._StateID = default(Nullable<int>);
				}
				this.SendPropertyChanged("State");
			}
		}
	}
	
	[Association(Name="UserType_UserInfo", Storage="_UserType", ThisKey="UserTypeID", OtherKey="UserTypeID", IsForeignKey=true)]
	public UserType UserType
	{
		get
		{
			return this._UserType.Entity;
		}
		set
		{
			UserType previousValue = this._UserType.Entity;
			if (((previousValue != value) 
						|| (this._UserType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserType.Entity = null;
					previousValue.UserInfos.Remove(this);
				}
				this._UserType.Entity = value;
				if ((value != null))
				{
					value.UserInfos.Add(this);
					this._UserTypeID = value.UserTypeID;
				}
				else
				{
					this._UserTypeID = default(int);
				}
				this.SendPropertyChanged("UserType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Agencies(Agency entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_Agencies(Agency entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_Announcements(Announcement entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_FormEntries(FormEntry entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_News(New entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_News(New entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_PaymentProfiles(PaymentProfile entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_PaymentProfiles(PaymentProfile entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_SavedFormEntries(SavedFormEntry entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_SavedFormEntries(SavedFormEntry entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_SavedSearches(SavedSearch entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_SavedSearches(SavedSearch entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_Subscriptions(Subscription entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_Subscriptions(Subscription entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
	
	private void attach_SystemAlertUserHistories(SystemAlertUserHistory entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = this;
	}
	
	private void detach_SystemAlertUserHistories(SystemAlertUserHistory entity)
	{
		this.SendPropertyChanging();
		entity.UserInfo = null;
	}
}

[Table(Name="dbo.UserPermission")]
public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserPermissionID;
	
	private string _PermissionName;
	
	private string _Description;
	
	private EntitySet<UserPermissionUserType> _UserPermissionUserTypes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserPermissionIDChanging(int value);
    partial void OnUserPermissionIDChanged();
    partial void OnPermissionNameChanging(string value);
    partial void OnPermissionNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public UserPermission()
	{
		this._UserPermissionUserTypes = new EntitySet<UserPermissionUserType>(new Action<UserPermissionUserType>(this.attach_UserPermissionUserTypes), new Action<UserPermissionUserType>(this.detach_UserPermissionUserTypes));
		OnCreated();
	}
	
	[Column(Storage="_UserPermissionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserPermissionID
	{
		get
		{
			return this._UserPermissionID;
		}
		set
		{
			if ((this._UserPermissionID != value))
			{
				this.OnUserPermissionIDChanging(value);
				this.SendPropertyChanging();
				this._UserPermissionID = value;
				this.SendPropertyChanged("UserPermissionID");
				this.OnUserPermissionIDChanged();
			}
		}
	}
	
	[Column(Storage="_PermissionName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string PermissionName
	{
		get
		{
			return this._PermissionName;
		}
		set
		{
			if ((this._PermissionName != value))
			{
				this.OnPermissionNameChanging(value);
				this.SendPropertyChanging();
				this._PermissionName = value;
				this.SendPropertyChanged("PermissionName");
				this.OnPermissionNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="UserPermission_UserPermissionUserType", Storage="_UserPermissionUserTypes", ThisKey="UserPermissionID", OtherKey="UserPermissionID")]
	public EntitySet<UserPermissionUserType> UserPermissionUserTypes
	{
		get
		{
			return this._UserPermissionUserTypes;
		}
		set
		{
			this._UserPermissionUserTypes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserPermissionUserTypes(UserPermissionUserType entity)
	{
		this.SendPropertyChanging();
		entity.UserPermission = this;
	}
	
	private void detach_UserPermissionUserTypes(UserPermissionUserType entity)
	{
		this.SendPropertyChanging();
		entity.UserPermission = null;
	}
}

[Table(Name="dbo.UserPermissionUserType")]
public partial class UserPermissionUserType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IndexID;
	
	private int _UserPermissionID;
	
	private int _UserTypeID;
	
	private EntityRef<UserPermission> _UserPermission;
	
	private EntityRef<UserType> _UserType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexIDChanging(int value);
    partial void OnIndexIDChanged();
    partial void OnUserPermissionIDChanging(int value);
    partial void OnUserPermissionIDChanged();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    #endregion
	
	public UserPermissionUserType()
	{
		this._UserPermission = default(EntityRef<UserPermission>);
		this._UserType = default(EntityRef<UserType>);
		OnCreated();
	}
	
	[Column(Storage="_IndexID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int IndexID
	{
		get
		{
			return this._IndexID;
		}
		set
		{
			if ((this._IndexID != value))
			{
				this.OnIndexIDChanging(value);
				this.SendPropertyChanging();
				this._IndexID = value;
				this.SendPropertyChanged("IndexID");
				this.OnIndexIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserPermissionID", DbType="Int NOT NULL")]
	public int UserPermissionID
	{
		get
		{
			return this._UserPermissionID;
		}
		set
		{
			if ((this._UserPermissionID != value))
			{
				if (this._UserPermission.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserPermissionIDChanging(value);
				this.SendPropertyChanging();
				this._UserPermissionID = value;
				this.SendPropertyChanged("UserPermissionID");
				this.OnUserPermissionIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserTypeID", DbType="Int NOT NULL")]
	public int UserTypeID
	{
		get
		{
			return this._UserTypeID;
		}
		set
		{
			if ((this._UserTypeID != value))
			{
				if (this._UserType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserTypeIDChanging(value);
				this.SendPropertyChanging();
				this._UserTypeID = value;
				this.SendPropertyChanged("UserTypeID");
				this.OnUserTypeIDChanged();
			}
		}
	}
	
	[Association(Name="UserPermission_UserPermissionUserType", Storage="_UserPermission", ThisKey="UserPermissionID", OtherKey="UserPermissionID", IsForeignKey=true)]
	public UserPermission UserPermission
	{
		get
		{
			return this._UserPermission.Entity;
		}
		set
		{
			UserPermission previousValue = this._UserPermission.Entity;
			if (((previousValue != value) 
						|| (this._UserPermission.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserPermission.Entity = null;
					previousValue.UserPermissionUserTypes.Remove(this);
				}
				this._UserPermission.Entity = value;
				if ((value != null))
				{
					value.UserPermissionUserTypes.Add(this);
					this._UserPermissionID = value.UserPermissionID;
				}
				else
				{
					this._UserPermissionID = default(int);
				}
				this.SendPropertyChanged("UserPermission");
			}
		}
	}
	
	[Association(Name="UserType_UserPermissionUserType", Storage="_UserType", ThisKey="UserTypeID", OtherKey="UserTypeID", IsForeignKey=true)]
	public UserType UserType
	{
		get
		{
			return this._UserType.Entity;
		}
		set
		{
			UserType previousValue = this._UserType.Entity;
			if (((previousValue != value) 
						|| (this._UserType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserType.Entity = null;
					previousValue.UserPermissionUserTypes.Remove(this);
				}
				this._UserType.Entity = value;
				if ((value != null))
				{
					value.UserPermissionUserTypes.Add(this);
					this._UserTypeID = value.UserTypeID;
				}
				else
				{
					this._UserTypeID = default(int);
				}
				this.SendPropertyChanged("UserType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.UserType")]
public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserTypeID;
	
	private string _TypeName;
	
	private string _Description;
	
	private EntitySet<UserInfo> _UserInfos;
	
	private EntitySet<UserPermissionUserType> _UserPermissionUserTypes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeIDChanging(int value);
    partial void OnUserTypeIDChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public UserType()
	{
		this._UserInfos = new EntitySet<UserInfo>(new Action<UserInfo>(this.attach_UserInfos), new Action<UserInfo>(this.detach_UserInfos));
		this._UserPermissionUserTypes = new EntitySet<UserPermissionUserType>(new Action<UserPermissionUserType>(this.attach_UserPermissionUserTypes), new Action<UserPermissionUserType>(this.detach_UserPermissionUserTypes));
		OnCreated();
	}
	
	[Column(Storage="_UserTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserTypeID
	{
		get
		{
			return this._UserTypeID;
		}
		set
		{
			if ((this._UserTypeID != value))
			{
				this.OnUserTypeIDChanging(value);
				this.SendPropertyChanging();
				this._UserTypeID = value;
				this.SendPropertyChanged("UserTypeID");
				this.OnUserTypeIDChanged();
			}
		}
	}
	
	[Column(Storage="_TypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string TypeName
	{
		get
		{
			return this._TypeName;
		}
		set
		{
			if ((this._TypeName != value))
			{
				this.OnTypeNameChanging(value);
				this.SendPropertyChanging();
				this._TypeName = value;
				this.SendPropertyChanged("TypeName");
				this.OnTypeNameChanged();
			}
		}
	}
	
	[Column(Storage="_Description", DbType="VarChar(2000) NOT NULL", CanBeNull=false)]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[Association(Name="UserType_UserInfo", Storage="_UserInfos", ThisKey="UserTypeID", OtherKey="UserTypeID")]
	public EntitySet<UserInfo> UserInfos
	{
		get
		{
			return this._UserInfos;
		}
		set
		{
			this._UserInfos.Assign(value);
		}
	}
	
	[Association(Name="UserType_UserPermissionUserType", Storage="_UserPermissionUserTypes", ThisKey="UserTypeID", OtherKey="UserTypeID")]
	public EntitySet<UserPermissionUserType> UserPermissionUserTypes
	{
		get
		{
			return this._UserPermissionUserTypes;
		}
		set
		{
			this._UserPermissionUserTypes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_UserInfos(UserInfo entity)
	{
		this.SendPropertyChanging();
		entity.UserType = this;
	}
	
	private void detach_UserInfos(UserInfo entity)
	{
		this.SendPropertyChanging();
		entity.UserType = null;
	}
	
	private void attach_UserPermissionUserTypes(UserPermissionUserType entity)
	{
		this.SendPropertyChanging();
		entity.UserType = this;
	}
	
	private void detach_UserPermissionUserTypes(UserPermissionUserType entity)
	{
		this.SendPropertyChanging();
		entity.UserType = null;
	}
}

[Table(Name="dbo.ValueFormat")]
public partial class ValueFormat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ValueFormatID;
	
	private string _FormatName;
	
	private EntitySet<FieldType> _FieldTypes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnValueFormatIDChanging(int value);
    partial void OnValueFormatIDChanged();
    partial void OnFormatNameChanging(string value);
    partial void OnFormatNameChanged();
    #endregion
	
	public ValueFormat()
	{
		this._FieldTypes = new EntitySet<FieldType>(new Action<FieldType>(this.attach_FieldTypes), new Action<FieldType>(this.detach_FieldTypes));
		OnCreated();
	}
	
	[Column(Storage="_ValueFormatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ValueFormatID
	{
		get
		{
			return this._ValueFormatID;
		}
		set
		{
			if ((this._ValueFormatID != value))
			{
				this.OnValueFormatIDChanging(value);
				this.SendPropertyChanging();
				this._ValueFormatID = value;
				this.SendPropertyChanged("ValueFormatID");
				this.OnValueFormatIDChanged();
			}
		}
	}
	
	[Column(Storage="_FormatName", DbType="VarChar(50)")]
	public string FormatName
	{
		get
		{
			return this._FormatName;
		}
		set
		{
			if ((this._FormatName != value))
			{
				this.OnFormatNameChanging(value);
				this.SendPropertyChanging();
				this._FormatName = value;
				this.SendPropertyChanged("FormatName");
				this.OnFormatNameChanged();
			}
		}
	}
	
	[Association(Name="ValueFormat_FieldType", Storage="_FieldTypes", ThisKey="ValueFormatID", OtherKey="ValueFormatID")]
	public EntitySet<FieldType> FieldTypes
	{
		get
		{
			return this._FieldTypes;
		}
		set
		{
			this._FieldTypes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_FieldTypes(FieldType entity)
	{
		this.SendPropertyChanging();
		entity.ValueFormat = this;
	}
	
	private void detach_FieldTypes(FieldType entity)
	{
		this.SendPropertyChanging();
		entity.ValueFormat = null;
	}
}
#pragma warning restore 1591
